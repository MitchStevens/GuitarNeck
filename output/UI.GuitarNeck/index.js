// Generated by purs version 0.11.7
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Biapplicative = require("../Control.Biapplicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Aff_Class = require("../Control.Monad.Aff.Class");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Class = require("../Control.Monad.Eff.Class");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_State_Class = require("../Control.Monad.State.Class");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var DOM = require("../DOM");
var DOM_Event_MouseEvent = require("../DOM.Event.MouseEvent");
var DOM_Event_Types = require("../DOM.Event.Types");
var DOM_HTML = require("../DOM.HTML");
var DOM_HTML_HTMLElement = require("../DOM.HTML.HTMLElement");
var DOM_HTML_Location = require("../DOM.HTML.Location");
var DOM_HTML_Types = require("../DOM.HTML.Types");
var DOM_HTML_Window = require("../DOM.HTML.Window");
var DOM_Node_ParentNode = require("../DOM.Node.ParentNode");
var Data_Array = require("../Data.Array");
var Data_Either = require("../Data.Either");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_StrMap = require("../Data.StrMap");
var Data_Tuple = require("../Data.Tuple");
var Data_Unit = require("../Data.Unit");
var Debug_Trace = require("../Debug.Trace");
var Fingering = require("../Fingering");
var Fret = require("../Fret");
var Graphics_Canvas = require("../Graphics.Canvas");
var Halogen = require("../Halogen");
var Halogen_Aff = require("../Halogen.Aff");
var Halogen_Aff_Util = require("../Halogen.Aff.Util");
var Halogen_Component = require("../Halogen.Component");
var Halogen_Component_ChildPath = require("../Halogen.Component.ChildPath");
var Halogen_HTML = require("../Halogen.HTML");
var Halogen_HTML_Core = require("../Halogen.HTML.Core");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements");
var Halogen_HTML_Events = require("../Halogen.HTML.Events");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM");
var Music = require("../Music");
var NeckData = require("../NeckData");
var Network_HTTP_Affjax = require("../Network.HTTP.Affjax");
var Node_FS = require("../Node.FS");
var Point = require("../Point");
var Prelude = require("../Prelude");
var Reader = require("../Reader");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var UI_FFTypes = require("../UI.FFTypes");
var UI_GuitarNeckCanvas = require("../UI.GuitarNeckCanvas");
var PaintNeck = (function () {
    function PaintNeck(value0) {
        this.value0 = value0;
    };
    PaintNeck.create = function (value0) {
        return new PaintNeck(value0);
    };
    return PaintNeck;
})();
var WipeNeck = (function () {
    function WipeNeck(value0) {
        this.value0 = value0;
    };
    WipeNeck.create = function (value0) {
        return new WipeNeck(value0);
    };
    return WipeNeck;
})();
var ClearAll = (function () {
    function ClearAll(value0) {
        this.value0 = value0;
    };
    ClearAll.create = function (value0) {
        return new ClearAll(value0);
    };
    return ClearAll;
})();
var MouseMove = (function () {
    function MouseMove(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    MouseMove.create = function (value0) {
        return function (value1) {
            return new MouseMove(value0, value1);
        };
    };
    return MouseMove;
})();
var MouseEnter = (function () {
    function MouseEnter(value0) {
        this.value0 = value0;
    };
    MouseEnter.create = function (value0) {
        return new MouseEnter(value0);
    };
    return MouseEnter;
})();
var MouseLeave = (function () {
    function MouseLeave(value0) {
        this.value0 = value0;
    };
    MouseLeave.create = function (value0) {
        return new MouseLeave(value0);
    };
    return MouseLeave;
})();
var MouseClick = (function () {
    function MouseClick(value0) {
        this.value0 = value0;
    };
    MouseClick.create = function (value0) {
        return new MouseClick(value0);
    };
    return MouseClick;
})();
var SetChord = (function () {
    function SetChord(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetChord.create = function (value0) {
        return function (value1) {
            return new SetChord(value0, value1);
        };
    };
    return SetChord;
})();
var Display = (function () {
    function Display(value0) {
        this.value0 = value0;
    };
    Display.create = function (value0) {
        return new Display(value0);
    };
    return Display;
})();
var ClickedFingering = (function () {
    function ClickedFingering(value0) {
        this.value0 = value0;
    };
    ClickedFingering.create = function (value0) {
        return new ClickedFingering(value0);
    };
    return ClickedFingering;
})();
var FocusedFingering = (function () {
    function FocusedFingering(value0) {
        this.value0 = value0;
    };
    FocusedFingering.create = function (value0) {
        return new FocusedFingering(value0);
    };
    return FocusedFingering;
})();
var next_state = function (either) {
    return function (state) {
        if (either instanceof Data_Either.Left) {
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)((function () {
                var $19 = {};
                for (var $20 in state) {
                    if ({}.hasOwnProperty.call(state, $20)) {
                        $19[$20] = state[$20];
                    };
                };
                $19.curr_chord = Data_Maybe.Nothing.value;
                $19.curr_fingerings = [  ];
                $19.focused = Data_Maybe.Nothing.value;
                return $19;
            })());
        };
        if (either instanceof Data_Either.Right) {
            var fingerings = Reader.get_fingerings(state.fingering_cache)(either.value0);
            var centeroids = Data_Array.mapMaybe(Fingering.cache_centeroid(state.neck_data))(fingerings);
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)((function () {
                var $23 = {};
                for (var $24 in state) {
                    if ({}.hasOwnProperty.call(state, $24)) {
                        $23[$24] = state[$24];
                    };
                };
                $23.curr_chord = new Data_Maybe.Just(either.value0);
                $23.curr_fingerings = centeroids;
                $23.focused = Data_Maybe.Nothing.value;
                return $23;
            })());
        };
        throw new Error("Failed pattern match at UI.GuitarNeck line 167, column 27 - line 178, column 28: " + [ either.constructor.name ]);
    };
};
var focused_fingering = function (state) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(state.focused)(function (v) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(state.curr_fingerings)(v))(function (v1) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v1.fingering);
        });
    });
};
var calc_offset = function (element) {
    return Control_Apply.lift2(Control_Monad_Eff.applyEff)(Control_Biapplicative.bipure(Data_Tuple.biapplicativeTuple))(DOM_HTML_HTMLElement.offsetLeft(element))(DOM_HTML_HTMLElement.offsetTop(element));
};
var guitar_neck = (function () {
    var render = function (state) {
        var width = state.neck_data.width + state.neck_data.x_offset;
        var num_fingerings = (function () {
            var $29 = Data_Maybe.isJust(state.curr_chord);
            if ($29) {
                return "Found " + (Data_Show.show(Data_Show.showInt)(Data_Array.length(state.curr_fingerings)) + " chords.");
            };
            return "Couldn't find any chord shapes.";
        })();
        var height = state.neck_data.height + state.neck_data.y_offset;
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("both-canvases") ])([ Halogen_HTML_Elements.canvas([ Halogen_HTML_Properties.id_("guitar_neck"), Halogen_HTML_Properties.width(Data_Int.ceil(width)), Halogen_HTML_Properties.height(Data_Int.ceil(height)) ]), Halogen_HTML_Elements.canvas([ Halogen_HTML_Properties.id_("guitar_notes"), Halogen_HTML_Properties.width(Data_Int.ceil(width)), Halogen_HTML_Properties.height(Data_Int.ceil(height)), Halogen_HTML_Events.onMouseMove(Halogen_HTML_Events.input(MouseMove.create)), Halogen_HTML_Events.onMouseEnter(Halogen_HTML_Events.input_(MouseEnter.create)), Halogen_HTML_Events.onMouseLeave(Halogen_HTML_Events.input_(MouseLeave.create)), Halogen_HTML_Events.onClick(Halogen_HTML_Events.input_(MouseClick.create)) ]) ]);
    };
    var initial = function (neck) {
        return {
            neck_data: neck,
            curr_chord: Data_Maybe.Nothing.value,
            curr_fingerings: [  ],
            focused: Data_Maybe.Nothing.value,
            fingering_cache: {
                open: Data_StrMap.empty,
                moveable: Data_StrMap.empty
            }
        };
    };
    var $$eval = function (v) {
        if (v instanceof PaintNeck) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(DOM_HTML.window)(DOM_HTML_Window.location))(DOM_HTML_Location.origin)))(function (v2) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(Reader.read_fingerings(v2)))(function (v3) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(UI_GuitarNeckCanvas.paint_neck(v1.neck_data)))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)((function () {
                                var $34 = {};
                                for (var $35 in v1) {
                                    if ({}.hasOwnProperty.call(v1, $35)) {
                                        $34[$35] = v1[$35];
                                    };
                                };
                                $34.fingering_cache = v3;
                                return $34;
                            })()))(function () {
                                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
                            });
                        });
                    });
                });
            });
        };
        if (v instanceof WipeNeck) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(UI_GuitarNeckCanvas.wipe_neck))(function () {
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
            });
        };
        if (v instanceof ClearAll) {
            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
        };
        if (v instanceof MouseMove) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(Halogen_Aff_Util.selectElement("#content #guitar")))(function (v2) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Semiring.zero(Data_Tuple.semiringTuple(Data_Semiring.semiringNumber)(Data_Semiring.semiringNumber))))(calc_offset)(v2)))(function (v3) {
                        var p = Data_Ring.sub(Data_Tuple.ringTuple(Data_Ring.ringNumber)(Data_Ring.ringNumber))(Point.point_int(DOM_Event_MouseEvent.pageX(v.value0))(DOM_Event_MouseEvent.pageY(v.value0)))(v3);
                        var closest = Fingering.closest_index(v1.neck_data)(p)(v1.curr_fingerings);
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Monad_Eff_Console.log(Data_Show.show(Data_Maybe.showMaybe(Data_Show.showInt))(closest))))(function () {
                            var $43 = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(closest)(v1.focused);
                            if ($43) {
                                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
                            };
                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Maybe.maybe(Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit))(function ($62) {
                                return Halogen_Query_HalogenM.raise(FocusedFingering.create($62));
                            })(focused_fingering(v1)))(function () {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)((function () {
                                    var $44 = {};
                                    for (var $45 in v1) {
                                        if ({}.hasOwnProperty.call(v1, $45)) {
                                            $44[$45] = v1[$45];
                                        };
                                    };
                                    $44.focused = closest;
                                    return $44;
                                })()))(function () {
                                    return $$eval(new Display(v.value1));
                                });
                            });
                        });
                    });
                });
            });
        };
        if (v instanceof MouseEnter) {
            return $$eval(new WipeNeck(v.value0));
        };
        if (v instanceof MouseLeave) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                var $50 = {};
                for (var $51 in st) {
                    if ({}.hasOwnProperty.call(st, $51)) {
                        $50[$51] = st[$51];
                    };
                };
                $50.focused = Data_Maybe.Nothing.value;
                return $50;
            }))(function () {
                return $$eval(new Display(v.value0));
            });
        };
        if (v instanceof MouseClick) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Maybe.maybe(Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit))(function ($63) {
                    return Halogen_Query_HalogenM.raise(ClickedFingering.create($63));
                })(focused_fingering(v1)))(function () {
                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
                });
            });
        };
        if (v instanceof SetChord) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(next_state(v.value0)(v1)))(function (v2) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v2))(function () {
                        return $$eval(new MouseLeave(v.value1));
                    });
                });
            });
        };
        if (v instanceof Display) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)($$eval(new WipeNeck(v.value0))))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(UI_GuitarNeckCanvas.display_neck(v1)))(function () {
                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
                    });
                });
            });
        };
        throw new Error("Failed pattern match at UI.GuitarNeck line 121, column 10 - line 164, column 13: " + [ v.constructor.name ]);
    };
    return Halogen_Component.component(Halogen_HTML_Core.bifunctorHTML)({
        initialState: initial,
        render: render,
        "eval": $$eval,
        receiver: Data_Function["const"](Data_Maybe.Nothing.value)
    });
})();
module.exports = {
    PaintNeck: PaintNeck,
    WipeNeck: WipeNeck,
    ClearAll: ClearAll,
    MouseMove: MouseMove,
    MouseEnter: MouseEnter,
    MouseLeave: MouseLeave,
    MouseClick: MouseClick,
    SetChord: SetChord,
    Display: Display,
    ClickedFingering: ClickedFingering,
    FocusedFingering: FocusedFingering,
    guitar_neck: guitar_neck,
    next_state: next_state,
    calc_offset: calc_offset,
    focused_fingering: focused_fingering
};
