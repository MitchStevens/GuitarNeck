// Generated by purs version 0.11.7
"use strict";
var CSS = require("../CSS");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Aff_Class = require("../Control.Monad.Aff.Class");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Class = require("../Control.Monad.Eff.Class");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_State_Class = require("../Control.Monad.State.Class");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var DOM_Event_MouseEvent = require("../DOM.Event.MouseEvent");
var DOM_HTML = require("../DOM.HTML");
var DOM_HTML_HTMLElement = require("../DOM.HTML.HTMLElement");
var DOM_HTML_Location = require("../DOM.HTML.Location");
var DOM_HTML_Types = require("../DOM.HTML.Types");
var DOM_HTML_Window = require("../DOM.HTML.Window");
var DOM_Node_ParentNode = require("../DOM.Node.ParentNode");
var Data_Array = require("../Data.Array");
var Data_Either = require("../Data.Either");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_StrMap = require("../Data.StrMap");
var Data_Tuple = require("../Data.Tuple");
var Data_Unit = require("../Data.Unit");
var Debug_Trace = require("../Debug.Trace");
var Fingering = require("../Fingering");
var Halogen = require("../Halogen");
var Halogen_Aff = require("../Halogen.Aff");
var Halogen_Aff_Util = require("../Halogen.Aff.Util");
var Halogen_Component = require("../Halogen.Component");
var Halogen_HTML = require("../Halogen.HTML");
var Halogen_HTML_CSS = require("../Halogen.HTML.CSS");
var Halogen_HTML_Core = require("../Halogen.HTML.Core");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements");
var Halogen_HTML_Events = require("../Halogen.HTML.Events");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM");
var Music = require("../Music");
var Point = require("../Point");
var Prelude = require("../Prelude");
var Reader = require("../Reader");
var Svg_Attributes = require("../Svg.Attributes");
var Svg_Elements = require("../Svg.Elements");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var UI_FFTypes = require("../UI.FFTypes");
var UI_GuitarNeck_Canvas = require("../UI.GuitarNeck.Canvas");
var UI_GuitarNeck_DrawSvg = require("../UI.GuitarNeck.DrawSvg");
var UI_GuitarNeck_Types = require("../UI.GuitarNeck.Types");
var next_state = function (either) {
    return function (state) {
        if (either instanceof Data_Either.Left) {
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)((function () {
                var $15 = {};
                for (var $16 in state) {
                    if ({}.hasOwnProperty.call(state, $16)) {
                        $15[$16] = state[$16];
                    };
                };
                $15.curr_chord = Data_Maybe.Nothing.value;
                $15.curr_fingerings = [  ];
                $15.focused = Data_Maybe.Nothing.value;
                return $15;
            })());
        };
        if (either instanceof Data_Either.Right) {
            var fingerings = Reader.get_fingerings(state.fingering_cache)(either.value0);
            var centeroids = Data_Array.mapMaybe(Fingering.cache_centeroid(state.neck_data))(fingerings);
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)((function () {
                var $19 = {};
                for (var $20 in state) {
                    if ({}.hasOwnProperty.call(state, $20)) {
                        $19[$20] = state[$20];
                    };
                };
                $19.curr_chord = new Data_Maybe.Just(either.value0);
                $19.curr_fingerings = centeroids;
                $19.focused = Data_Maybe.Nothing.value;
                return $19;
            })());
        };
        throw new Error("Failed pattern match at UI.GuitarNeck line 127, column 27 - line 138, column 28: " + [ either.constructor.name ]);
    };
};
var focused_fingering = function (state) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(state.focused)(function (v) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(state.curr_fingerings)(v))(function (v1) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v1.fingering);
        });
    });
};
var calc_offset = function (element) {
    return Control_Apply.lift2(Control_Monad_Eff.applyEff)(Data_Tuple.Tuple.create)(DOM_HTML_HTMLElement.offsetLeft(element))(DOM_HTML_HTMLElement.offsetTop(element));
};
var guitar_neck = (function () {
    var render = function (state) {
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("guitar-neck"), Halogen_HTML_Events.onMouseMove(Halogen_HTML_Events.input(UI_GuitarNeck_Types.MouseMove.create)), Halogen_HTML_Events.onMouseEnter(Halogen_HTML_Events.input_(UI_GuitarNeck_Types.MouseEnter.create)), Halogen_HTML_Events.onMouseLeave(Halogen_HTML_Events.input_(UI_GuitarNeck_Types.MouseLeave.create)), Halogen_HTML_Events.onClick(Halogen_HTML_Events.input_(UI_GuitarNeck_Types.MouseClick.create)) ])([ UI_GuitarNeck_DrawSvg.draw_neck(state.neck_data) ]);
    };
    var initial = function (neck) {
        return {
            neck_data: neck,
            curr_chord: Data_Maybe.Nothing.value,
            curr_fingerings: [  ],
            focused: Data_Maybe.Nothing.value,
            fingering_cache: {
                open: Data_StrMap.empty,
                moveable: Data_StrMap.empty
            }
        };
    };
    var $$eval = function (v) {
        if (v instanceof UI_GuitarNeck_Types.PaintNeck) {
            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
        };
        if (v instanceof UI_GuitarNeck_Types.WipeNeck) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(UI_GuitarNeck_Canvas.wipe_neck))(function () {
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
            });
        };
        if (v instanceof UI_GuitarNeck_Types.ClearAll) {
            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
        };
        if (v instanceof UI_GuitarNeck_Types.MouseMove) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(Halogen_Aff_Util.selectElement("#content #guitar")))(function (v2) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Semiring.zero(Data_Tuple.semiringTuple(Data_Semiring.semiringNumber)(Data_Semiring.semiringNumber))))(calc_offset)(v2)))(function (v3) {
                        var p = Data_Ring.sub(Data_Tuple.ringTuple(Data_Ring.ringNumber)(Data_Ring.ringNumber))(Point.point_int(DOM_Event_MouseEvent.pageX(v.value0))(DOM_Event_MouseEvent.pageY(v.value0)))(v3);
                        var closest = Fingering.closest_index(v1.neck_data)(p)(v1.curr_fingerings);
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Monad_Eff_Console.log(Data_Show.show(Data_Maybe.showMaybe(Data_Show.showInt))(closest))))(function () {
                            var $32 = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(closest)(v1.focused);
                            if ($32) {
                                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
                            };
                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Maybe.maybe(Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit))(function ($51) {
                                return Halogen_Query_HalogenM.raise(UI_GuitarNeck_Types.FocusedFingering.create($51));
                            })(focused_fingering(v1)))(function () {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)((function () {
                                    var $33 = {};
                                    for (var $34 in v1) {
                                        if ({}.hasOwnProperty.call(v1, $34)) {
                                            $33[$34] = v1[$34];
                                        };
                                    };
                                    $33.focused = closest;
                                    return $33;
                                })()))(function () {
                                    return $$eval(new UI_GuitarNeck_Types.Display(v.value1));
                                });
                            });
                        });
                    });
                });
            });
        };
        if (v instanceof UI_GuitarNeck_Types.MouseEnter) {
            return $$eval(new UI_GuitarNeck_Types.WipeNeck(v.value0));
        };
        if (v instanceof UI_GuitarNeck_Types.MouseLeave) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                var $39 = {};
                for (var $40 in st) {
                    if ({}.hasOwnProperty.call(st, $40)) {
                        $39[$40] = st[$40];
                    };
                };
                $39.focused = Data_Maybe.Nothing.value;
                return $39;
            }))(function () {
                return $$eval(new UI_GuitarNeck_Types.Display(v.value0));
            });
        };
        if (v instanceof UI_GuitarNeck_Types.MouseClick) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Maybe.maybe(Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit))(function ($52) {
                    return Halogen_Query_HalogenM.raise(UI_GuitarNeck_Types.ClickedFingering.create($52));
                })(focused_fingering(v1)))(function () {
                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
                });
            });
        };
        if (v instanceof UI_GuitarNeck_Types.SetChord) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(next_state(v.value0)(v1)))(function (v2) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v2))(function () {
                        return $$eval(new UI_GuitarNeck_Types.MouseLeave(v.value1));
                    });
                });
            });
        };
        if (v instanceof UI_GuitarNeck_Types.Display) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)($$eval(new UI_GuitarNeck_Types.WipeNeck(v.value0))))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(UI_GuitarNeck_Canvas.display_neck(v1)))(function () {
                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
                    });
                });
            });
        };
        throw new Error("Failed pattern match at UI.GuitarNeck line 81, column 10 - line 124, column 13: " + [ v.constructor.name ]);
    };
    return Halogen_Component.lifecycleComponent(Halogen_HTML_Core.bifunctorHTML)({
        initialState: initial,
        render: render,
        "eval": $$eval,
        receiver: Data_Function["const"](Data_Maybe.Nothing.value),
        initializer: new Data_Maybe.Just(new UI_GuitarNeck_Types.PaintNeck(Data_Unit.unit)),
        finalizer: Data_Maybe.Nothing.value
    });
})();
module.exports = {
    guitar_neck: guitar_neck
};
