// Generated by purs version 0.11.7
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array = require("../Data.Array");
var Data_Array_Partial = require("../Data.Array.Partial");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Ord = require("../Data.Ord");
var Data_Sequence_Internal = require("../Data.Sequence.Internal");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var Digit = function (x) {
    return x;
};
var traversableDigit = Data_Traversable.traversableArray;
var showDigit = function (dictShow) {
    return Data_Show.showArray(dictShow);
};
var runDigit = function (v) {
    return v;
};
var tailDigit = function ($14) {
    return Data_Array_Partial.tail()(runDigit($14));
};
var unsafeIndex = function (dictPartial) {
    return function (xs) {
        return Data_Array.unsafeIndex(dictPartial)(runDigit(xs));
    };
};
var overDigit = Unsafe_Coerce.unsafeCoerce;
var snocDigit = function (dictPartial) {
    return function (dg) {
        return function (x) {
            return overDigit(function (xs) {
                return Data_Array.snoc(xs)(x);
            })(dg);
        };
    };
};
var mkDigitMay = function (xs) {
    var $13 = Data_Ord.between(Data_Ord.ordInt)(1)(4)(Data_Array.length(xs));
    if ($13) {
        return new Data_Maybe.Just(xs);
    };
    return Data_Maybe.Nothing.value;
};
var mkDigit3 = function (x) {
    return function (y) {
        return function (z) {
            return [ x, y, z ];
        };
    };
};
var mkDigit2 = function (x) {
    return function (y) {
        return [ x, y ];
    };
};
var mkDigit1 = function (x) {
    return [ x ];
};
var mkDigit = function (dictPartial) {
    return Digit;
};
var measuredDigit = function (dictMonoid) {
    return function (dictMeasured) {
        return new Data_Sequence_Internal.Measured(function ($15) {
            return Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredArray(dictMonoid)(dictMeasured))(runDigit($15));
        });
    };
};
var lastDigit = function ($16) {
    return Data_Array_Partial.last()(runDigit($16));
};
var initDigit = function ($17) {
    return Data_Array_Partial.init()(runDigit($17));
};
var headDigit = function ($18) {
    return Data_Array_Partial.head()(runDigit($18));
};
var functorDigit = Data_Functor.functorArray;
var foldableDigit = Data_Foldable.foldableArray;
var dropDigit = function (n) {
    return function ($19) {
        return Data_Array.drop(n)(runDigit($19));
    };
};
var digitLength = function ($20) {
    return Data_Array.length(runDigit($20));
};
var consDigit = function (dictPartial) {
    return function (x) {
        return function (dg) {
            return overDigit(Data_Array.cons(x))(dg);
        };
    };
};
module.exports = {
    mkDigit: mkDigit,
    mkDigitMay: mkDigitMay,
    mkDigit1: mkDigit1,
    mkDigit2: mkDigit2,
    mkDigit3: mkDigit3,
    runDigit: runDigit,
    headDigit: headDigit,
    tailDigit: tailDigit,
    initDigit: initDigit,
    lastDigit: lastDigit,
    snocDigit: snocDigit,
    consDigit: consDigit,
    dropDigit: dropDigit,
    digitLength: digitLength,
    unsafeIndex: unsafeIndex,
    functorDigit: functorDigit,
    showDigit: showDigit,
    foldableDigit: foldableDigit,
    traversableDigit: traversableDigit,
    measuredDigit: measuredDigit
};
