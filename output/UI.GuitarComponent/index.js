// Generated by purs version 0.11.7
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Eff_Class = require("../Control.Monad.Eff.Class");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Data_Const = require("../Data.Const");
var Data_Either = require("../Data.Either");
var Data_Either_Nested = require("../Data.Either.Nested");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Functor_Coproduct_Nested = require("../Data.Functor.Coproduct.Nested");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Show = require("../Data.Show");
var Data_Unit = require("../Data.Unit");
var Fingering = require("../Fingering");
var Halogen = require("../Halogen");
var Halogen_Aff = require("../Halogen.Aff");
var Halogen_Component = require("../Halogen.Component");
var Halogen_Component_ChildPath = require("../Halogen.Component.ChildPath");
var Halogen_HTML = require("../Halogen.HTML");
var Halogen_HTML_Core = require("../Halogen.HTML.Core");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements");
var Halogen_HTML_Events = require("../Halogen.HTML.Events");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties");
var Halogen_Query = require("../Halogen.Query");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM");
var NeckData = require("../NeckData");
var Prelude = require("../Prelude");
var UI_ChordDiagram = require("../UI.ChordDiagram");
var UI_ChordDiagram_Types = require("../UI.ChordDiagram.Types");
var UI_ChordInput = require("../UI.ChordInput");
var UI_FFTypes = require("../UI.FFTypes");
var UI_GuitarNeck = require("../UI.GuitarNeck");
var UI_GuitarNeck_Types = require("../UI.GuitarNeck.Types");
var UI_Queue = require("../UI.Queue");
var GuitarNeckOutput = (function () {
    function GuitarNeckOutput(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    GuitarNeckOutput.create = function (value0) {
        return function (value1) {
            return new GuitarNeckOutput(value0, value1);
        };
    };
    return GuitarNeckOutput;
})();
var ChordInputOutput = (function () {
    function ChordInputOutput(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ChordInputOutput.create = function (value0) {
        return function (value1) {
            return new ChordInputOutput(value0, value1);
        };
    };
    return ChordInputOutput;
})();
var ChordQueueOutput = (function () {
    function ChordQueueOutput(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ChordQueueOutput.create = function (value0) {
        return function (value1) {
            return new ChordQueueOutput(value0, value1);
        };
    };
    return ChordQueueOutput;
})();
var guitar_component = (function () {
    var render = function (state) {
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("guitar") ])([ Halogen_HTML["slot'"](Halogen_Component_ChildPath.cp1)(Data_Unit.unit)(UI_GuitarNeck.guitar_neck)(state.neck_data)(Halogen_HTML_Events.input(GuitarNeckOutput.create)), Halogen_HTML["slot'"](Halogen_Component_ChildPath.cp2)(Data_Unit.unit)(UI_ChordInput.chord_input)(Data_Unit.unit)(Halogen_HTML_Events.input(ChordInputOutput.create)), Halogen_HTML_Elements.div_([ Halogen_HTML_Core.text(Data_Show.show(Data_Show.showInt)(state.num_fingerings)) ]), Halogen_HTML["slot'"](Halogen_Component_ChildPath.cp3)(Data_Unit.unit)(UI_Queue.ui_queue)({
            limit: 3,
            component: UI_ChordDiagram.chord_diagram
        })(Halogen_HTML_Events.input(ChordQueueOutput.create)) ]);
    };
    var initial = function (input) {
        return {
            neck_data: input,
            num_fingerings: 0
        };
    };
    var $$eval = function (v) {
        if (v instanceof GuitarNeckOutput && v.value0 instanceof UI_GuitarNeck_Types.ClickedFingering) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Monad_Eff_Console.log(Data_Show.show(Fingering.show_fingering)(v.value0.value0))))(function () {
                var x = {
                    fingering: v.value0.value0,
                    name: "Chord",
                    dimensions: UI_ChordDiagram_Types.default_dimensions
                };
                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query["query'"](Data_Either.eqEither(Data_Eq.eqUnit)(Data_Either.eqEither(Data_Eq.eqUnit)(Data_Either.eqEither(Data_Eq.eqUnit)(Data_Eq.eqVoid))))(Halogen_Component_ChildPath.cp3)(Data_Unit.unit)(new UI_Queue.Cons(x, Data_Unit.unit)))(function (v1) {
                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
                });
            });
        };
        if (v instanceof GuitarNeckOutput) {
            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
        };
        if (v instanceof ChordInputOutput) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query["query'"](Data_Either.eqEither(Data_Eq.eqUnit)(Data_Either.eqEither(Data_Eq.eqUnit)(Data_Either.eqEither(Data_Eq.eqUnit)(Data_Eq.eqVoid))))(Halogen_Component_ChildPath.cp1)(Data_Unit.unit)(new UI_GuitarNeck_Types.SetChord(v.value0.value0, Data_Unit.unit)))(function (v1) {
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
            });
        };
        if (v instanceof ChordQueueOutput) {
            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
        };
        throw new Error("Failed pattern match at UI.GuitarComponent line 66, column 10 - line 78, column 34: " + [ v.constructor.name ]);
    };
    return Halogen_Component.parentComponent(Data_Either.ordEither(Data_Ord.ordUnit)(Data_Either.ordEither(Data_Ord.ordUnit)(Data_Either.ordEither(Data_Ord.ordUnit)(Data_Ord.ordVoid))))({
        initialState: initial,
        render: render,
        "eval": $$eval,
        receiver: Data_Function["const"](Data_Maybe.Nothing.value)
    });
})();
module.exports = {
    GuitarNeckOutput: GuitarNeckOutput,
    ChordInputOutput: ChordInputOutput,
    ChordQueueOutput: ChordQueueOutput,
    guitar_component: guitar_component
};
