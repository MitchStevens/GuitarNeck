// Generated by purs version 0.11.7
"use strict";
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Function = require("../Data.Function");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Fret = require("../Fret");
var $$Math = require("../Math");
var Point = require("../Point");
var Prelude = require("../Prelude");
var str_y = function (neck) {
    return function (y) {
        return neck.y_offset + ((y * 2.0 + 1.0) * neck.height) / 12.0;
    };
};
var fret_x = function (neck) {
    return function (x) {
        var t = $$Math.pow(2.0)(-1.0 / 12.0);
        var n = Data_Int.toNumber(neck.num_frets);
        return neck.x_offset + (neck.width * (1.0 - $$Math.pow(t)(x))) / (1.0 - $$Math.pow(t)(n));
    };
};
var neck_transformation = function (neck) {
    return function (v) {
        return Point.point(fret_x(neck)(v.x))(str_y(neck)(v.y));
    };
};
var fret_marker = function (neck) {
    return function (fret) {
        var f = fret_x(neck);
        var nat_x = (function () {
            if (fret === 0) {
                return 0.0;
            };
            return (f(Data_Int.toNumber(fret)) + f(Data_Int.toNumber(fret) - 1.0)) * 0.5;
        })();
        return nat_x;
    };
};
var fret_transformation = function (neck) {
    return function (v) {
        return Point.point(fret_marker(neck)(Fret.Fret(Data_Int.round(v.x))))(str_y(neck)(v.y));
    };
};
module.exports = {
    neck_transformation: neck_transformation,
    fret_transformation: fret_transformation
};
