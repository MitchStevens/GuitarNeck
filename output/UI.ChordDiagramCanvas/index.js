// Generated by purs version 0.11.7
"use strict";
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Data_Array = require("../Data.Array");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Int = require("../Data.Int");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Tuple = require("../Data.Tuple");
var Fingering = require("../Fingering");
var Graphics_Canvas = require("../Graphics.Canvas");
var Point = require("../Point");
var Prelude = require("../Prelude");
var v_margin = 0.15;
var paint_line = function (ctx) {
    return function (v) {
        return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.strokePath(ctx)(Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Graphics_Canvas.moveTo(ctx)(v.value0.x)(v.value0.y))(Graphics_Canvas.lineTo(ctx)(v.value1.x)(v.value1.y)))(Graphics_Canvas.closePath(ctx))));
    };
};
var num_strings = 6;
var num_frets = 4;
var font_size = 16;
var transformation = function (v) {
    return function (v1) {
        var alpha = v.height * (1.0 - 2.0 * v_margin) - Data_Int.toNumber(font_size);
        var beta = (v.width - alpha) * 0.5;
        return Point.point((alpha * v1.x) / Data_Int.toNumber(num_strings - 1 | 0) + beta)((alpha * v1.y) / Data_Int.toNumber(num_frets) + v_margin + Data_Int.toNumber(font_size));
    };
};
var paint_chord_diagram = function (fingering) {
    return function (element) {
        var v = new Data_Tuple.Tuple(0, 0);
        var v1 = new Data_Tuple.Tuple(num_strings - 1 | 0, num_frets);
        var lines = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(function (y) {
            return new Data_Tuple.Tuple(Point.point_int(v.value0)(y), Point.point_int(v1.value0)(y));
        })(Data_Array.range(v.value1)(v1.value1)))(Data_Functor.map(Data_Functor.functorArray)(function (x) {
            return new Data_Tuple.Tuple(Point.point_int(x)(v.value1), Point.point_int(x)(v1.value1));
        })(Data_Array.range(v.value0)(v1.value0)));
        return function __do() {
            var v2 = Graphics_Canvas.getCanvasDimensions(element)();
            var v3 = Graphics_Canvas.getContext2D(element)();
            var f = transformation(v2);
            return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(paint_line(v3))(Data_Functor.map(Data_Functor.functorArray)(Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(f)(f))(lines))();
        };
    };
};
module.exports = {
    paint_chord_diagram: paint_chord_diagram
};
