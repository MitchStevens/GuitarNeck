// Generated by purs version 0.11.7
"use strict";
var Control_Monad_Eff_AVar = require("../Control.Monad.Eff.AVar");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Lattice = require("../Data.Lattice");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Interval = (function () {
    function Interval(value0) {
        this.value0 = value0;
    };
    Interval.create = function (value0) {
        return new Interval(value0);
    };
    return Interval;
})();
var EmptyInterval = (function () {
    function EmptyInterval() {

    };
    EmptyInterval.value = new EmptyInterval();
    return EmptyInterval;
})();
var within = function (dictOrd) {
    return function (v) {
        return function (v1) {
            if (v instanceof Interval && v1 instanceof Interval) {
                return Data_Ord.lessThanOrEq(dictOrd)(v1.value0.min)(v.value0.min) && Data_Ord.lessThanOrEq(dictOrd)(v.value0.max)(v1.value0.max);
            };
            if (v1 instanceof EmptyInterval) {
                return false;
            };
            if (v instanceof EmptyInterval) {
                return true;
            };
            throw new Error("Failed pattern match at Interval line 77, column 1 - line 77, column 65: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var show_interval = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof EmptyInterval) {
            return "{}";
        };
        if (v instanceof Interval) {
            return "[" + (Data_Show.show(dictShow)(v.value0.min) + (", " + (Data_Show.show(dictShow)(v.value0.max) + "]")));
        };
        throw new Error("Failed pattern match at Interval line 36, column 1 - line 36, column 56: " + [ v.constructor.name ]);
    });
};
var num_interval = function (dictSemiring) {
    return function (dictOrd) {
        return new Data_Semiring.Semiring(function (v) {
            return function (v1) {
                if (v instanceof Interval && v1 instanceof Interval) {
                    return new Interval({
                        min: Data_Semiring.add(dictSemiring)(v.value0.min)(v1.value0.min),
                        max: Data_Semiring.add(dictSemiring)(v.value0.max)(v1.value0.max)
                    });
                };
                return EmptyInterval.value;
            };
        }, function (v) {
            return function (v1) {
                if (v instanceof Interval && v1 instanceof Interval) {
                    var l = [ Data_Semiring.mul(dictSemiring)(v.value0.min)(v.value0.max), Data_Semiring.mul(dictSemiring)(v.value0.min)(v1.value0.max), Data_Semiring.mul(dictSemiring)(v1.value0.min)(v.value0.max), Data_Semiring.mul(dictSemiring)(v1.value0.min)(v1.value0.max) ];
                    return new Interval({
                        min: Data_Maybe.fromMaybe(Data_Semiring.zero(dictSemiring))(Data_Foldable.minimum(dictOrd)(Data_Foldable.foldableArray)(l)),
                        max: Data_Maybe.fromMaybe(Data_Semiring.zero(dictSemiring))(Data_Foldable.maximum(dictOrd)(Data_Foldable.foldableArray)(l))
                    });
                };
                return EmptyInterval.value;
            };
        }, new Interval({
            min: Data_Semiring.one(dictSemiring),
            max: Data_Semiring.one(dictSemiring)
        }), new Interval({
            min: Data_Semiring.zero(dictSemiring),
            max: Data_Semiring.zero(dictSemiring)
        }));
    };
};
var ring_interval = function (dictRing) {
    return function (dictOrd) {
        return new Data_Ring.Ring(function () {
            return num_interval(dictRing.Semiring0())(dictOrd);
        }, function (v) {
            return function (v1) {
                if (v instanceof Interval && v1 instanceof Interval) {
                    return new Interval({
                        min: Data_Ring.sub(dictRing)(v.value0.min)(v1.value0.min),
                        max: Data_Ring.sub(dictRing)(v.value0.max)(v1.value0.max)
                    });
                };
                return EmptyInterval.value;
            };
        });
    };
};
var is_empty = function (dictOrd) {
    return function (v) {
        if (v instanceof EmptyInterval) {
            return true;
        };
        return false;
    };
};
var is_degenerate = function (dictOrd) {
    return function (v) {
        if (v instanceof Interval) {
            return Data_Eq.eq(dictOrd.Eq0())(v.value0.min)(v.value0.max);
        };
        if (v instanceof EmptyInterval) {
            return false;
        };
        throw new Error("Failed pattern match at Interval line 68, column 1 - line 68, column 58: " + [ v.constructor.name ]);
    };
};
var interval = function (dictOrd) {
    return function (min) {
        return function (max) {
            var $60 = Data_Ord.greaterThan(dictOrd)(min)(max);
            if ($60) {
                return EmptyInterval.value;
            };
            return new Interval({
                min: min,
                max: max
            });
        };
    };
};
var join_interval = function (dictOrd) {
    return new Data_Lattice.JoinSemilattice(function (v) {
        return function (v1) {
            if (v instanceof Interval && v1 instanceof Interval) {
                return interval(dictOrd)(Data_Ord.min(dictOrd)(v.value0.min)(v1.value0.min))(Data_Ord.max(dictOrd)(v.value0.max)(v1.value0.max));
            };
            if (v1 instanceof EmptyInterval) {
                return v;
            };
            if (v instanceof EmptyInterval) {
                return v1;
            };
            throw new Error("Failed pattern match at Interval line 41, column 1 - line 41, column 66: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var meet_interval = function (dictOrd) {
    return new Data_Lattice.MeetSemilattice(function (v) {
        return function (v1) {
            if (v instanceof Interval && v1 instanceof Interval) {
                return interval(dictOrd)(Data_Ord.max(dictOrd)(v.value0.min)(v1.value0.min))(Data_Ord.min(dictOrd)(v.value0.max)(v1.value0.max));
            };
            if (v1 instanceof EmptyInterval) {
                return EmptyInterval.value;
            };
            if (v instanceof EmptyInterval) {
                return EmptyInterval.value;
            };
            throw new Error("Failed pattern match at Interval line 46, column 1 - line 46, column 67: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var latticejoin_interval = function (dictBounded) {
    return new Data_Lattice.Lattice(function () {
        return join_interval(dictBounded.Ord0());
    }, function () {
        return meet_interval(dictBounded.Ord0());
    });
};
var singleton = function (dictOrd) {
    return function (x) {
        return interval(dictOrd)(x)(x);
    };
};
var in_interval = function (dictOrd) {
    return function (x) {
        return function (v) {
            if (v instanceof Interval) {
                return Data_Ord.lessThanOrEq(dictOrd)(v.value0.min)(x) && Data_Ord.lessThanOrEq(dictOrd)(x)(v.value0.max);
            };
            if (v instanceof EmptyInterval) {
                return false;
            };
            throw new Error("Failed pattern match at Interval line 72, column 1 - line 72, column 61: " + [ x.constructor.name, v.constructor.name ]);
        };
    };
};
var eq_interval = function (dictEq) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            if (v instanceof Interval && v1 instanceof Interval) {
                return Data_Eq.eq(dictEq)(v.value0.min)(v1.value0.min) && Data_Eq.eq(dictEq)(v.value0.max)(v1.value0.max);
            };
            if (v instanceof EmptyInterval && v1 instanceof EmptyInterval) {
                return true;
            };
            return false;
        };
    });
};
var boundedmeet_interval = function (dictBounded) {
    return new Data_Lattice.BoundedMeetSemilattice(function () {
        return meet_interval(dictBounded.Ord0());
    }, interval(dictBounded.Ord0())(Data_Bounded.bottom(dictBounded))(Data_Bounded.top(dictBounded)));
};
var boundedjoin_interval = function (dictOrd) {
    return new Data_Lattice.BoundedJoinSemilattice(function () {
        return join_interval(dictOrd);
    }, EmptyInterval.value);
};
module.exports = {
    Interval: Interval,
    EmptyInterval: EmptyInterval,
    interval: interval,
    is_empty: is_empty,
    is_degenerate: is_degenerate,
    in_interval: in_interval,
    within: within,
    singleton: singleton,
    eq_interval: eq_interval,
    num_interval: num_interval,
    ring_interval: ring_interval,
    show_interval: show_interval,
    join_interval: join_interval,
    meet_interval: meet_interval,
    boundedjoin_interval: boundedjoin_interval,
    boundedmeet_interval: boundedmeet_interval,
    latticejoin_interval: latticejoin_interval
};
