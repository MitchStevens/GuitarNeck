// Generated by purs version 0.11.7
"use strict";
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Eff_Class = require("../Control.Monad.Eff.Class");
var Control_Monad_Eff_Random = require("../Control.Monad.Eff.Random");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Test_QuickCheck = require("../Test.QuickCheck");
var Test_QuickCheck_LCG = require("../Test.QuickCheck.LCG");
var Test_Unit = require("../Test.Unit");
var quickCheck$prime = function (dictTestable) {
    return function (tries) {
        return function (prop) {
            return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Test_QuickCheck_LCG.randomSeed))(function (v) {
                var wins$prime = function (acc) {
                    return function (v1) {
                        if (v1 instanceof Test_QuickCheck.Success) {
                            return acc + 1 | 0;
                        };
                        return acc;
                    };
                };
                var results = Test_QuickCheck.quickCheckPure(dictTestable)(v)(tries)(prop);
                var wins = Data_Foldable.foldl(Data_List_Types.foldableList)(wins$prime)(0)(results);
                var findErr = function ($copy_v1) {
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v1) {
                        if (v1 instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return Data_Maybe.Nothing.value;
                        };
                        if (v1 instanceof Data_List_Types.Cons && v1.value0 instanceof Test_QuickCheck.Failed) {
                            $tco_done = true;
                            return new Data_Maybe.Just(v1.value0.value0);
                        };
                        if (v1 instanceof Data_List_Types.Cons) {
                            $copy_v1 = v1.value1;
                            return;
                        };
                        throw new Error("Failed pattern match at Test.Unit.QuickCheck line 24, column 7 - line 24, column 28: " + [ v1.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($copy_v1);
                    };
                    return $tco_result;
                };
                var v1 = findErr(results);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Test_Unit.success;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return Test_Unit.failure(Data_Show.show(Data_Show.showInt)(tries - wins | 0) + ("/" + (Data_Show.show(Data_Show.showInt)(tries) + (" tests failed: " + v1.value0))));
                };
                throw new Error("Failed pattern match at Test.Unit.QuickCheck line 27, column 3 - line 29, column 95: " + [ v1.constructor.name ]);
            });
        };
    };
};
var quickCheck = function (dictTestable) {
    return quickCheck$prime(dictTestable)(100);
};
module.exports = {
    quickCheck: quickCheck,
    "quickCheck'": quickCheck$prime
};
