// Generated by purs version 0.11.7
"use strict";
var CSS_Common = require("../CSS.Common");
var CSS_Property = require("../CSS.Property");
var CSS_String = require("../CSS.String");
var CSS_Stylesheet = require("../CSS.Stylesheet");
var Control_Apply = require("../Control.Apply");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Generic = require("../Data.Generic");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_Unit = require("../Data.Unit");
var Disc = (function () {
    function Disc() {

    };
    Disc.value = new Disc();
    return Disc;
})();
var Circle = (function () {
    function Circle() {

    };
    Circle.value = new Circle();
    return Circle;
})();
var Square = (function () {
    function Square() {

    };
    Square.value = new Square();
    return Square;
})();
var Decimal = (function () {
    function Decimal() {

    };
    Decimal.value = new Decimal();
    return Decimal;
})();
var Georgian = (function () {
    function Georgian() {

    };
    Georgian.value = new Georgian();
    return Georgian;
})();
var CJKIdeographic = (function () {
    function CJKIdeographic() {

    };
    CJKIdeographic.value = new CJKIdeographic();
    return CJKIdeographic;
})();
var Kannada = (function () {
    function Kannada() {

    };
    Kannada.value = new Kannada();
    return Kannada;
})();
var None = (function () {
    function None() {

    };
    None.value = new None();
    return None;
})();
var Inherit = (function () {
    function Inherit() {

    };
    Inherit.value = new Inherit();
    return Inherit;
})();
var Initial = (function () {
    function Initial() {

    };
    Initial.value = new Initial();
    return Initial;
})();
var Unset = (function () {
    function Unset() {

    };
    Unset.value = new Unset();
    return Unset;
})();
var CustomStyleType = (function () {
    function CustomStyleType(value0) {
        this.value0 = value0;
    };
    CustomStyleType.create = function (value0) {
        return new CustomStyleType(value0);
    };
    return CustomStyleType;
})();
var StringStyleType = (function () {
    function StringStyleType(value0) {
        this.value0 = value0;
    };
    StringStyleType.create = function (value0) {
        return new StringStyleType(value0);
    };
    return StringStyleType;
})();
var valListStyleType = new CSS_Property.Val(function (v) {
    if (v instanceof Disc) {
        return CSS_String.fromString(CSS_Property.isStringValue)("disc");
    };
    if (v instanceof Circle) {
        return CSS_String.fromString(CSS_Property.isStringValue)("circle");
    };
    if (v instanceof Square) {
        return CSS_String.fromString(CSS_Property.isStringValue)("square");
    };
    if (v instanceof Decimal) {
        return CSS_String.fromString(CSS_Property.isStringValue)("decimal");
    };
    if (v instanceof Georgian) {
        return CSS_String.fromString(CSS_Property.isStringValue)("georgian");
    };
    if (v instanceof CJKIdeographic) {
        return CSS_String.fromString(CSS_Property.isStringValue)("cjk-ideographic");
    };
    if (v instanceof Kannada) {
        return CSS_String.fromString(CSS_Property.isStringValue)("kannada");
    };
    if (v instanceof None) {
        return CSS_String.fromString(CSS_Property.isStringValue)("none");
    };
    if (v instanceof Initial) {
        return CSS_String.fromString(CSS_Property.isStringValue)("initial");
    };
    if (v instanceof Inherit) {
        return CSS_String.fromString(CSS_Property.isStringValue)("inherit");
    };
    if (v instanceof Unset) {
        return CSS_String.fromString(CSS_Property.isStringValue)("unset");
    };
    if (v instanceof CustomStyleType) {
        return CSS_String.fromString(CSS_Property.isStringValue)("custom-" + v.value0);
    };
    if (v instanceof StringStyleType) {
        return CSS_String.fromString(CSS_Property.isStringValue)(v.value0);
    };
    throw new Error("Failed pattern match at CSS.ListStyle.Type line 36, column 1 - line 36, column 47: " + [ v.constructor.name ]);
});
var unsetListStyleType = new CSS_Common.Unset(Unset.value);
var stringListStyleType = function (s) {
    return new StringStyleType(s);
};
var square = Square.value;
var noneListTypeType = new CSS_Common.None(None.value);
var listStyleType = CSS_Stylesheet.key(valListStyleType)(CSS_String.fromString(CSS_Property.isStringKey)("list-style-type"));
var kannada = Kannada.value;
var initialListStyleType = new CSS_Common.Initial(Initial.value);
var inheritListStyleType = new CSS_Common.Inherit(Inherit.value);
var georgian = Georgian.value;
var genericListStyleType = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.Disc" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Disc.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.Circle" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Circle.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.Square" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Square.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.Decimal" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Decimal.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.Georgian" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Georgian.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.CJKIdeographic" && v.value1.length === 0)) {
        return new Data_Maybe.Just(CJKIdeographic.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.Kannada" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Kannada.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.None" && v.value1.length === 0)) {
        return new Data_Maybe.Just(None.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.Inherit" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Inherit.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.Initial" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Initial.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.Unset" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Unset.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.CustomStyleType" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(CustomStyleType.create))(Data_Generic.fromSpine(Data_Generic.genericString)(v["value1"][0](Data_Unit.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "CSS.ListStyle.Type.StringStyleType" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(StringStyleType.create))(Data_Generic.fromSpine(Data_Generic.genericString)(v["value1"][0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("CSS.ListStyle.Type.ListStyleType", [ {
        sigConstructor: "CSS.ListStyle.Type.Disc",
        sigValues: [  ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.Circle",
        sigValues: [  ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.Square",
        sigValues: [  ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.Decimal",
        sigValues: [  ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.Georgian",
        sigValues: [  ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.CJKIdeographic",
        sigValues: [  ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.Kannada",
        sigValues: [  ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.None",
        sigValues: [  ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.Inherit",
        sigValues: [  ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.Initial",
        sigValues: [  ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.Unset",
        sigValues: [  ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.CustomStyleType",
        sigValues: [ function ($dollarq1) {
            return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
        } ]
    }, {
        sigConstructor: "CSS.ListStyle.Type.StringStyleType",
        sigValues: [ function ($dollarq1) {
            return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
        } ]
    } ]);
}, function (v) {
    if (v instanceof Disc) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.Disc", [  ]);
    };
    if (v instanceof Circle) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.Circle", [  ]);
    };
    if (v instanceof Square) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.Square", [  ]);
    };
    if (v instanceof Decimal) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.Decimal", [  ]);
    };
    if (v instanceof Georgian) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.Georgian", [  ]);
    };
    if (v instanceof CJKIdeographic) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.CJKIdeographic", [  ]);
    };
    if (v instanceof Kannada) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.Kannada", [  ]);
    };
    if (v instanceof None) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.None", [  ]);
    };
    if (v instanceof Inherit) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.Inherit", [  ]);
    };
    if (v instanceof Initial) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.Initial", [  ]);
    };
    if (v instanceof Unset) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.Unset", [  ]);
    };
    if (v instanceof CustomStyleType) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.CustomStyleType", [ function ($dollarq) {
            return Data_Generic.toSpine(Data_Generic.genericString)(v.value0);
        } ]);
    };
    if (v instanceof StringStyleType) {
        return new Data_Generic.SProd("CSS.ListStyle.Type.StringStyleType", [ function ($dollarq) {
            return Data_Generic.toSpine(Data_Generic.genericString)(v.value0);
        } ]);
    };
    throw new Error("Failed pattern match at CSS.ListStyle.Type line 31, column 8 - line 31, column 62: " + [ v.constructor.name ]);
});
var showListStyleType = new Data_Show.Show(Data_Generic.gShow(genericListStyleType));
var eqListStyleType = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Disc && y instanceof Disc) {
            return true;
        };
        if (x instanceof Circle && y instanceof Circle) {
            return true;
        };
        if (x instanceof Square && y instanceof Square) {
            return true;
        };
        if (x instanceof Decimal && y instanceof Decimal) {
            return true;
        };
        if (x instanceof Georgian && y instanceof Georgian) {
            return true;
        };
        if (x instanceof CJKIdeographic && y instanceof CJKIdeographic) {
            return true;
        };
        if (x instanceof Kannada && y instanceof Kannada) {
            return true;
        };
        if (x instanceof None && y instanceof None) {
            return true;
        };
        if (x instanceof Inherit && y instanceof Inherit) {
            return true;
        };
        if (x instanceof Initial && y instanceof Initial) {
            return true;
        };
        if (x instanceof Unset && y instanceof Unset) {
            return true;
        };
        if (x instanceof CustomStyleType && y instanceof CustomStyleType) {
            return x.value0 === y.value0;
        };
        if (x instanceof StringStyleType && y instanceof StringStyleType) {
            return x.value0 === y.value0;
        };
        return false;
    };
});
var ordListStyleType = new Data_Ord.Ord(function () {
    return eqListStyleType;
}, function (x) {
    return function (y) {
        if (x instanceof Disc && y instanceof Disc) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Disc) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Disc) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Circle && y instanceof Circle) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Circle) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Circle) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Square && y instanceof Square) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Square) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Square) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Decimal && y instanceof Decimal) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Decimal) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Decimal) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Georgian && y instanceof Georgian) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Georgian) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Georgian) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof CJKIdeographic && y instanceof CJKIdeographic) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof CJKIdeographic) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof CJKIdeographic) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Kannada && y instanceof Kannada) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Kannada) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Kannada) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof None && y instanceof None) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof None) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof None) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Inherit && y instanceof Inherit) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Inherit) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Inherit) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Initial && y instanceof Initial) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Initial) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Initial) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Unset && y instanceof Unset) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Unset) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Unset) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof CustomStyleType && y instanceof CustomStyleType) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof CustomStyleType) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof CustomStyleType) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof StringStyleType && y instanceof StringStyleType) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at CSS.ListStyle.Type line 30, column 8 - line 30, column 54: " + [ x.constructor.name, y.constructor.name ]);
    };
});
var disc = Disc.value;
var decimal = Decimal.value;
var customListStyleType = function (s) {
    return new CustomStyleType(s);
};
var cjkIdeographic = CJKIdeographic.value;
var circle = Circle.value;
module.exports = {
    Disc: Disc,
    Circle: Circle,
    Square: Square,
    Decimal: Decimal,
    Georgian: Georgian,
    CJKIdeographic: CJKIdeographic,
    Kannada: Kannada,
    None: None,
    Inherit: Inherit,
    Initial: Initial,
    Unset: Unset,
    CustomStyleType: CustomStyleType,
    StringStyleType: StringStyleType,
    disc: disc,
    circle: circle,
    square: square,
    decimal: decimal,
    georgian: georgian,
    cjkIdeographic: cjkIdeographic,
    kannada: kannada,
    customListStyleType: customListStyleType,
    stringListStyleType: stringListStyleType,
    listStyleType: listStyleType,
    eqListStyleType: eqListStyleType,
    ordListStyleType: ordListStyleType,
    genericListStyleType: genericListStyleType,
    showListStyleType: showListStyleType,
    valListStyleType: valListStyleType,
    initialListStyleType: initialListStyleType,
    inheritListStyleType: inheritListStyleType,
    unsetListStyleType: unsetListStyleType,
    noneListTypeType: noneListTypeType
};
