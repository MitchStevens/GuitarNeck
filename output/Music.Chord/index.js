// Generated by purs version 0.11.7
"use strict";
var Control_Apply = require("../Control.Apply");
var Control_Category = require("../Control.Category");
var Data_Array = require("../Data.Array");
var Data_Boolean = require("../Data.Boolean");
var Data_Either = require("../Data.Either");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Monoid = require("../Data.Monoid");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Music_Extension = require("../Music.Extension");
var Music_Key = require("../Music.Key");
var Music_Mode = require("../Music.Mode");
var Music_Note = require("../Music.Note");
var Music_Scale = require("../Music.Scale");
var Music_Transpose = require("../Music.Transpose");
var Prelude = require("../Prelude");
var Chord = (function () {
    function Chord(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Chord.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Chord(value0, value1, value2);
            };
        };
    };
    return Chord;
})();
var transpose_chord = new Music_Transpose.Transpose(function (n) {
    return function (v) {
        return new Chord(Music_Transpose.trans(Music_Note.transpose_pitchclass)(n)(v.value0), v.value1, v.value2);
    };
});
var to_notes = function (v) {
    var root_note = new Music_Note.Pitch(v.value0, 4);
    var keyed_note = new Music_Key.Keyed({
        pitch: v.value0,
        mode: v.value1
    }, root_note);
    var contains_ext = function (n) {
        return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (ex) {
            return Music_Extension.degree(ex) === n;
        })(v.value2);
    };
    var notes = Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
        var $14 = contains_ext(3);
        if ($14) {
            return [  ];
        };
        return [ new Music_Extension.Add(3) ];
    })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
        var $15 = contains_ext(5);
        if ($15) {
            return [  ];
        };
        return [ new Music_Extension.Add(5) ];
    })())(v.value2));
    return Data_Array.cons(root_note)(Data_Functor.map(Data_Functor.functorArray)(Music_Scale.find_extension(keyed_note))(notes));
};
var show_quality = function (v) {
    if (v.value1 instanceof Music_Mode.Major) {
        return "";
    };
    if (v.value1 instanceof Music_Mode.Minor) {
        return "m";
    };
    if (v.value1 instanceof Music_Mode.Mixolydian) {
        return "";
    };
    if (v.value1 instanceof Music_Mode.Diminished && v.value2.length === 0) {
        return "dim";
    };
    if (v.value1 instanceof Music_Mode.Augmented && v.value2.length === 0) {
        return "aug";
    };
    return Data_Show.show(Music_Mode.show_mode)(v.value1);
};
var show_extensions = function (v) {
    return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Show.show(Music_Extension.show_extension))(v.value2);
};
var show_chord = new Data_Show.Show(function (v) {
    return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Control_Category.id(Control_Category.categoryFn))([ Data_Show.show(Music_Note.show_pitchclass)(v.value0), show_quality(v), show_extensions(v) ]);
});
var mk_chord = function (note) {
    return function (mode) {
        return function (exts) {
            return Data_Either.Right.create(new Chord(note, mode, exts));
        };
    };
};
var implicit_extensions = function (v) {
    if (v instanceof Music_Extension.Add && v.value0 === 9) {
        return [ new Music_Extension.Add(7), new Music_Extension.Add(9) ];
    };
    if (v instanceof Music_Extension.Add && v.value0 === 11) {
        return [ new Music_Extension.Add(7), new Music_Extension.Add(9), new Music_Extension.Add(11) ];
    };
    if (v instanceof Music_Extension.Add && v.value0 === 13) {
        return [ new Music_Extension.Add(7), new Music_Extension.Add(9), new Music_Extension.Add(11), new Music_Extension.Add(13) ];
    };
    return [ v ];
};
var eq_chord = new Data_Eq.Eq(function (c1) {
    return function (c2) {
        var same_elements = function (a) {
            return function (b) {
                return Data_Array["null"](Data_Array.difference(Music_Note.eq_pitch)(a)(b)) && Data_Array["null"](Data_Array.difference(Music_Note.eq_pitch)(b)(a));
            };
        };
        return same_elements(to_notes(c1))(to_notes(c2));
    };
});
var degree_test = function (v) {
    return function (e) {
        var diff_degree = function (a) {
            return function (b) {
                return Music_Extension.degree(a) !== Music_Extension.degree(b);
            };
        };
        return Data_Foldable.and(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(diff_degree)(implicit_extensions(e)))(v.value2));
    };
};
var add_ext = function (v) {
    return function (e) {
        if (Data_Array.length(v.value2) > 5) {
            return new Data_Either.Left("Too many notes in chord");
        };
        if (!degree_test(v)(e)) {
            return Data_Either.Left.create("Two exts of the same degree found in chord. All extensions: " + Data_Show.show(Data_Show.showArray(Music_Extension.show_extension))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(implicit_extensions(e))(v.value2)));
        };
        if (Data_Boolean.otherwise) {
            return Data_Either.Right.create(new Chord(v.value0, v.value1, implicit_extensions(e)));
        };
        throw new Error("Failed pattern match at Music.Chord line 62, column 1 - line 62, column 53: " + [ v.constructor.name, e.constructor.name ]);
    };
};
module.exports = {
    Chord: Chord,
    show_quality: show_quality,
    show_extensions: show_extensions,
    to_notes: to_notes,
    mk_chord: mk_chord,
    add_ext: add_ext,
    degree_test: degree_test,
    implicit_extensions: implicit_extensions,
    eq_chord: eq_chord,
    show_chord: show_chord,
    transpose_chord: transpose_chord
};
