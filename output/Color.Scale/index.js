// Generated by purs version 0.11.7
"use strict";
var Color = require("../Color");
var Color_Scheme_X11 = require("../Color.Scheme.X11");
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Int = require("../Data.Int");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Monoid = require("../Data.Monoid");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var ColorStop = (function () {
    function ColorStop(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ColorStop.create = function (value0) {
        return function (value1) {
            return new ColorStop(value0, value1);
        };
    };
    return ColorStop;
})();
var ColorStops = (function () {
    function ColorStops(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    ColorStops.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new ColorStops(value0, value1, value2);
            };
        };
    };
    return ColorStops;
})();
var ColorScale = (function () {
    function ColorScale(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ColorScale.create = function (value0) {
        return function (value1) {
            return new ColorScale(value0, value1);
        };
    };
    return ColorScale;
})();
var stopRatio = function (v) {
    return v.value1;
};
var stopColor = function (v) {
    return v.value0;
};
var ratio = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0);
var modify$prime = function (f) {
    return function (v) {
        var f$prime = function (v1) {
            return new ColorStop(f(v1.value1)(v1.value0), v1.value1);
        };
        return new ColorStops(f(0.0)(v.value0), Data_Functor.map(Data_List_Types.functorList)(f$prime)(v.value1), f(1.0)(v.value2));
    };
};
var modify = function (f) {
    return function (v) {
        return ColorScale.create(v.value0)(modify$prime(f)(v.value1));
    };
};
var cssColorStopsRGB = function (v) {
    if (v.value1 instanceof Data_List_Types.Nil) {
        return Color.cssStringHSLA(v.value0) + (", " + Color.cssStringHSLA(v.value2));
    };
    var percentage = function (r) {
        return Data_Show.show(Data_Show.showNumber)(r * 100.0) + "%";
    };
    var toString = function (v1) {
        return Color.cssStringHSLA(v1.value0) + (" " + percentage(v1.value1));
    };
    return Color.cssStringHSLA(v.value0) + (", " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_List_Types.functorList)(toString)(v.value1)) + (", " + Color.cssStringHSLA(v.value2))));
};
var colors$prime = function (f) {
    return function (v) {
        if (v === 0) {
            return Data_List_Types.Nil.value;
        };
        if (v === 1) {
            return new Data_List_Types.Cons(f(0.0), Data_List_Types.Nil.value);
        };
        var mkColor = function (i) {
            return f(Data_Int.toNumber(i) / Data_Int.toNumber(v - 1 | 0));
        };
        return Data_Functor.map(Data_List_Types.functorList)(mkColor)(Data_List.range(0)(v - 1 | 0));
    };
};
var colorStop = function (c) {
    return function (r) {
        return new ColorStop(c, ratio(r));
    };
};
var combineStops$prime = function (epsilon) {
    return function (at) {
        return function (v) {
            return function (v1) {
                var startStops = Data_Functor.mapFlipped(Data_List_Types.functorList)(v.value1)(function (stop) {
                    return colorStop(stopColor(stop))(stopRatio(stop) / (1.0 / at));
                });
                var midStops = new Data_List_Types.Cons(colorStop(v.value2)(at - epsilon), new Data_List_Types.Cons(colorStop(v1.value0)(at), Data_List_Types.Nil.value));
                var endStops = Data_Functor.mapFlipped(Data_List_Types.functorList)(v1.value1)(function (stop) {
                    return colorStop(stopColor(stop))(at + stopRatio(stop) / (1.0 / (1.0 - at)));
                });
                return new ColorStops(v.value0, Data_Semigroup.append(Data_List_Types.semigroupList)(startStops)(Data_Semigroup.append(Data_List_Types.semigroupList)(midStops)(endStops)), v1.value2);
            };
        };
    };
};
var combineStops = combineStops$prime(1.0e-6);
var mkSimpleSampler = function (interpolate) {
    return function (v) {
        return function (x) {
            if (x < 0.0) {
                return v.value0;
            };
            if (x > 1.0) {
                return v.value2;
            };
            if (Data_Boolean.otherwise) {
                var go = function ($copy_v1) {
                    return function ($copy_v2) {
                        return function ($copy_v3) {
                            var $tco_var_v1 = $copy_v1;
                            var $tco_var_v2 = $copy_v2;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(v1, v2, v3) {
                                if (v3 instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return v1;
                                };
                                if (v3 instanceof Data_List_Types.Cons) {
                                    var $74 = Data_Ord.between(Data_Ord.ordNumber)(v2)(v3.value0.value1)(x);
                                    if ($74) {
                                        var $75 = v2 === v3.value0.value1;
                                        if ($75) {
                                            $tco_done = true;
                                            return v1;
                                        };
                                        $tco_done = true;
                                        return interpolate(v1)(v3.value0.value0)((x - v2) / (v3.value0.value1 - v2));
                                    };
                                    $tco_var_v1 = v3.value0.value0;
                                    $tco_var_v2 = v3.value0.value1;
                                    $copy_v3 = v3.value1;
                                    return;
                                };
                                throw new Error("Failed pattern match at Color.Scale line 173, column 5 - line 173, column 23: " + [ v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
                            };
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_v1, $tco_var_v2, $copy_v3);
                            };
                            return $tco_result;
                        };
                    };
                };
                return go(v.value0)(0.0)(Data_List.snoc(v.value1)(colorStop(v.value2)(1.0)));
            };
            throw new Error("Failed pattern match at Color.Scale line 167, column 1 - line 167, column 65: " + [ interpolate.constructor.name, v.constructor.name, x.constructor.name ]);
        };
    };
};
var cubehelixSample = mkSimpleSampler(Color.mixCubehelix(1.0));
var sample = function (v) {
    return mkSimpleSampler(Color.mix(v.value0))(v.value1);
};
var colors = function (scale) {
    return colors$prime(sample(scale));
};
var reverseStops = function (v) {
    var newStops = Data_Functor.mapFlipped(Data_List_Types.functorList)(Data_List.reverse(v.value1))(function (stop) {
        return colorStop(stopColor(stop))(1.0 - stopRatio(stop));
    });
    return new ColorStops(v.value2, newStops, v.value0);
};
var uniformScale$prime = function (dictFoldable) {
    return function (b) {
        return function (middle) {
            return function (e) {
                var cs = Data_List.fromFoldable(dictFoldable)(middle);
                var len = Data_List.length(cs);
                var n = 1 + len | 0;
                var makeStop = function (i) {
                    return function (col) {
                        return colorStop(col)(Data_Int.toNumber(i) / Data_Int.toNumber(n));
                    };
                };
                var stops = Data_List.zipWith(makeStop)(Data_List.range(1)(n))(cs);
                return new ColorStops(b, stops, e);
            };
        };
    };
};
var uniformScale = function (dictFoldable) {
    return function (mode) {
        return function (b) {
            return function (middle) {
                return function (e) {
                    return ColorScale.create(mode)(uniformScale$prime(dictFoldable)(b)(middle)(e));
                };
            };
        };
    };
};
var yellowToRed = (function () {
    var yellow = Color.fromInt(16777164);
    var red = Color.fromInt(8388646);
    var orange = Color.fromInt(16616764);
    return uniformScale(Data_List_Types.foldableList)(Color.Lab.value)(yellow)(new Data_List_Types.Cons(orange, Data_List_Types.Nil.value))(red);
})();
var colorScale = function (space) {
    return function (b) {
        return function (middle) {
            return function (e) {
                return ColorScale.create(space)(new ColorStops(b, middle, e));
            };
        };
    };
};
var cool = colorScale(Color.RGB.value)(Color.hsl(180.0)(1.0)(0.6))(Data_List_Types.Nil.value)(Color.hsl(300.0)(1.0)(0.5));
var grayscale = colorScale(Color.RGB.value)(Color.black)(Data_List_Types.Nil.value)(Color.white);
var hot = colorScale(Color.RGB.value)(Color.black)(new Data_List_Types.Cons(colorStop(Color_Scheme_X11.red)(0.5), new Data_List_Types.Cons(colorStop(Color_Scheme_X11.yellow)(0.75), Data_List_Types.Nil.value)))(Color.white);
var spectrum = (function () {
    var stops = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(35))(function (v) {
        var r = Data_Int.toNumber(v);
        return Control_Applicative.pure(Data_List_Types.applicativeList)(colorStop(Color.hsl(10.0 * r)(1.0)(0.5))(r / 36.0));
    });
    var end = Color.hsl(0.0)(1.0)(0.5);
    return colorScale(Color.HSL.value)(end)(stops)(end);
})();
var spectrumLCh = (function () {
    var end = Color.lch(70.0)(35.0)(0.0);
    var stops = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(35))(function (v) {
        var r = Data_Int.toNumber(v);
        return Control_Applicative.pure(Data_List_Types.applicativeList)(colorStop(Color.lch(70.0)(35.0)(10.0 * r))(r / 36.0));
    });
    return colorScale(Color.LCh.value)(end)(stops)(end);
})();
var blueToRed = (function () {
    var red = Color.fromInt(11671595);
    var gray = Color.fromInt(16250871);
    var blue = Color.fromInt(2188972);
    return uniformScale(Data_List_Types.foldableList)(Color.Lab.value)(blue)(new Data_List_Types.Cons(gray, Data_List_Types.Nil.value))(red);
})();
var addStop$prime = function (v) {
    return function (c) {
        return function (r) {
            var stop = colorStop(c)(r);
            return new ColorStops(v.value0, Data_List.insertBy(Data_Ord.comparing(Data_Ord.ordNumber)(stopRatio))(stop)(v.value1), v.value2);
        };
    };
};
var minColorStops = function (v) {
    return function (v1) {
        return function (stops) {
            if (v === 0) {
                return stops;
            };
            var insertStops = Data_Foldable.foldl(Data_List_Types.foldableList)(function (stops$prime) {
                return function (v2) {
                    return addStop$prime(stops$prime)(v2.value0)(v2.value1);
                };
            });
            var additionalStops = (function () {
                var $104 = v <= 2;
                if ($104) {
                    return Data_List_Types.Nil.value;
                };
                return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(v - 1 | 0))(function (v2) {
                    var frac = ratio(Data_Int.toNumber(v2) / Data_Int.toNumber(v));
                    return Control_Applicative.pure(Data_List_Types.applicativeList)(new ColorStop(v1(stops)(frac), frac));
                });
            })();
            return insertStops(stops)(additionalStops);
        };
    };
};
var cssColorStops = function (v) {
    if (v.value0 instanceof Color.RGB) {
        return cssColorStopsRGB(v.value1);
    };
    return cssColorStopsRGB(minColorStops(10)(mkSimpleSampler(Color.mix(v.value0)))(v.value1));
};
var cubehelix = (function () {
    var e = Color.hsl(-240.0)(0.5)(1.0);
    var b = Color.hsl(300.0)(0.5)(0.0);
    var gen = function (v) {
        return Color.mixCubehelix(1.0)(b)(e);
    };
    return ColorScale.create(Color.HSL.value)(minColorStops(100)(gen)(new ColorStops(b, Data_List_Types.Nil.value, e)));
})();
var addStop = function (v) {
    return function (c) {
        return function (r) {
            return ColorScale.create(v.value0)(addStop$prime(v.value1)(c)(r));
        };
    };
};
module.exports = {
    colorStop: colorStop,
    stopRatio: stopRatio,
    stopColor: stopColor,
    colorScale: colorScale,
    ColorStops: ColorStops,
    "combineStops'": combineStops$prime,
    combineStops: combineStops,
    reverseStops: reverseStops,
    uniformScale: uniformScale,
    "uniformScale'": uniformScale$prime,
    addStop: addStop,
    "addStop'": addStop$prime,
    sample: sample,
    cubehelixSample: cubehelixSample,
    mkSimpleSampler: mkSimpleSampler,
    colors: colors,
    "colors'": colors$prime,
    modify: modify,
    "modify'": modify$prime,
    grayscale: grayscale,
    hot: hot,
    cool: cool,
    spectrum: spectrum,
    spectrumLCh: spectrumLCh,
    blueToRed: blueToRed,
    yellowToRed: yellowToRed,
    cubehelix: cubehelix,
    minColorStops: minColorStops,
    cssColorStops: cssColorStops,
    cssColorStopsRGB: cssColorStopsRGB
};
