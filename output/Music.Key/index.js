// Generated by purs version 0.11.7
"use strict";
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Data_Array = require("../Data.Array");
var Data_Enum = require("../Data.Enum");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor = require("../Data.Functor");
var Data_Generic_Rep = require("../Data.Generic.Rep");
var Data_Generic_Rep_Enum = require("../Data.Generic.Rep.Enum");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Monoid = require("../Data.Monoid");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Music_Mode = require("../Music.Mode");
var Music_Note = require("../Music.Note");
var Prelude = require("../Prelude");
var Keyed = (function () {
    function Keyed(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Keyed.create = function (value0) {
        return function (value1) {
            return new Keyed(value0, value1);
        };
    };
    return Keyed;
})();
var show_keyed = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ "(", Data_Show.show(dictShow)(v.value1), ": ", Data_Show.show(Music_Note.show_pitchclass)(v.value0.pitch), Data_Show.show(Music_Mode.show_mode)(v.value0.mode), ")" ]);
    });
};
var functor_keyed = new Data_Functor.Functor(function (f) {
    return function (m) {
        return new Keyed(m.value0, f(m.value1));
    };
});
var foldable_keyed = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v.value1)(z);
        };
    };
});
var traversable_keyed = new Data_Traversable.Traversable(function () {
    return foldable_keyed;
}, function () {
    return functor_keyed;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Keyed.create(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return Data_Traversable.sequence(traversable_keyed)(dictApplicative)(Data_Functor.map(functor_keyed)(f)(xs));
        };
    };
});
var extend_keyed = new Control_Extend.Extend(function () {
    return functor_keyed;
}, function (f) {
    return function (v) {
        return new Keyed(v.value0, f(v));
    };
});
var eq_keyed = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(Music_Mode.eq_mode)(x.value0.mode)(y.value0.mode) && Data_Eq.eq(Music_Note.eq_pitchclass)(x.value0.pitch)(y.value0.pitch) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
        };
    });
};
var comonad_keyed = new Control_Comonad.Comonad(function () {
    return extend_keyed;
}, function (v) {
    return v.value1;
});
module.exports = {
    Keyed: Keyed,
    eq_keyed: eq_keyed,
    functor_keyed: functor_keyed,
    extend_keyed: extend_keyed,
    comonad_keyed: comonad_keyed,
    foldable_keyed: foldable_keyed,
    traversable_keyed: traversable_keyed,
    show_keyed: show_keyed
};
