// Generated by purs version 0.11.7
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Monad = require("../Control.Monad");
var Control_MonadPlus = require("../Control.MonadPlus");
var Control_MonadZero = require("../Control.MonadZero");
var Control_Plus = require("../Control.Plus");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Eq = require("../Data.Eq");
var Data_FingerTree = require("../Data.FingerTree");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Lazy = require("../Data.Lazy");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Monoid_Additive = require("../Data.Monoid.Additive");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Sequence_Internal = require("../Data.Sequence.Internal");
var Data_Sequence_Ordered = require("../Data.Sequence.Ordered");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Unfoldable = require("../Data.Unfoldable");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var Seq = function (x) {
    return x;
};
var unsnoc = function (v) {
    var v1 = Data_FingerTree.viewR(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v);
    if (v1 instanceof Data_FingerTree.NilR) {
        return Data_Maybe.Nothing.value;
    };
    if (v1 instanceof Data_FingerTree.SnocR) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(Data_Lazy.force(v1.value0), Data_Sequence_Internal.getElem(v1.value1)));
    };
    throw new Error("Failed pattern match at Data.Sequence line 211, column 3 - line 213, column 65: " + [ v1.constructor.name ]);
};
var unsafeIndex = function (dictPartial) {
    return function (i) {
        return function (v) {
            var v1 = Data_FingerTree.splitTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(dictPartial)(function (n) {
                return i < Data_Newtype.unwrap(Data_Monoid_Additive.newtypeAdditive)(n);
            })(0)(v);
            return Data_Sequence_Internal.getElem(v1.value1);
        };
    };
};
var unsafeAdjust = function (dictPartial) {
    return function (f) {
        return function (i) {
            return function (v) {
                var v1 = Data_FingerTree.splitTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(dictPartial)(function (n) {
                    return i < Data_Newtype.unwrap(Data_Monoid_Additive.newtypeAdditive)(n);
                })(0)(v);
                var l$prime = Data_FingerTree.snoc(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(Data_Lazy.force(v1.value0))(f(v1.value1));
                return Data_FingerTree.append(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(l$prime)(Data_Lazy.force(v1.value2));
            };
        };
    };
};
var uncons = function (v) {
    var v1 = Data_FingerTree.viewL(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v);
    if (v1 instanceof Data_FingerTree.NilL) {
        return Data_Maybe.Nothing.value;
    };
    if (v1 instanceof Data_FingerTree.ConsL) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(Data_Sequence_Internal.getElem(v1.value0), Data_Lazy.force(v1.value1)));
    };
    throw new Error("Failed pattern match at Data.Sequence line 202, column 3 - line 204, column 65: " + [ v1.constructor.name ]);
};
var toUnfoldable = function (dictFunctor) {
    return function (dictUnfoldable) {
        return function (v) {
            return Data_Sequence_Internal.mapGetElem(dictFunctor)(Data_FingerTree.unfoldLeft(dictUnfoldable)(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v));
        };
    };
};
var splitAt$prime = function (i) {
    return function (v) {
        var tuple = Data_FingerTree.split(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)()(function (n) {
            return i < Data_Newtype.unwrap(Data_Monoid_Additive.newtypeAdditive)(n);
        })(v);
        var seqify = function (dictFunctor) {
            return Unsafe_Coerce.unsafeCoerce;
        };
        return seqify(Data_Lazy.functorLazy)(tuple);
    };
};
var take = function (i) {
    return function ($111) {
        return Data_Lazy.force(Data_Tuple.fst(splitAt$prime(i)($111)));
    };
};
var splitAt = function (i) {
    return function (xs) {
        var tuple = splitAt$prime(i)(xs);
        var forceBoth = Data_Profunctor_Strong.splitStrong(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(Data_Lazy.force)(Data_Lazy.force);
        return forceBoth(tuple);
    };
};
var snoc = function (v) {
    return function (x) {
        return Data_FingerTree.snoc(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v)(x);
    };
};
var showSeq = function (dictShow) {
    return new Data_Show.Show(function (xs) {
        return "(Seq.fromFoldable [" + (Data_Sequence_Internal.strJoin(dictShow)(",")(toUnfoldable(Data_Functor.functorArray)(Data_Unfoldable.unfoldableArray)(xs)) + "])");
    });
};
var $$null = function (v) {
    if (v instanceof Data_FingerTree.Empty) {
        return true;
    };
    return false;
};
var mapSeq = function (dictFunctor) {
    return Unsafe_Coerce.unsafeCoerce;
};
var tail = function (v) {
    return mapSeq(Data_Maybe.functorMaybe)(Data_FingerTree.tail(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v));
};
var map = function (f) {
    return function (v) {
        return Data_Functor.map(Data_FingerTree.functorFingerTree)(f)(v);
    };
};
var length = function (v) {
    return Data_Newtype.un(Data_Monoid_Additive.newtypeAdditive)(Data_Monoid_Additive.Additive)(Data_Sequence_Internal.measure(Data_FingerTree.measuredFingerTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem))(v));
};
var last = function (v) {
    return Data_Sequence_Internal.mapGetElem(Data_Maybe.functorMaybe)(Data_FingerTree.last(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v));
};
var init = function (v) {
    return mapSeq(Data_Maybe.functorMaybe)(Data_FingerTree.init(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v));
};
var inBounds = function (i) {
    return function (seq) {
        return 0 <= i && i < length(seq);
    };
};
var index = function (i) {
    return function (xs) {
        var $83 = inBounds(i)(xs);
        if ($83) {
            return Data_Maybe.Just.create(unsafeIndex()(i)(xs));
        };
        return Data_Maybe.Nothing.value;
    };
};
var head = function (v) {
    return Data_Sequence_Internal.mapGetElem(Data_Maybe.functorMaybe)(Data_FingerTree.head(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v));
};
var functorSeq = new Data_Functor.Functor(map);
var fullyForce = function (v) {
    return Data_FingerTree.fullyForce(v);
};
var foldableSeq = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Foldable.foldMap(Data_FingerTree.foldableFingerTree)(dictMonoid)(Data_Sequence_Internal.liftElem(f))(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_Foldable.foldl(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.lift2Elem(f))(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_Foldable.foldr(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.liftElem(f))(z)(v);
        };
    };
});
var traversableSeq = new Data_Traversable.Traversable(function () {
    return foldableSeq;
}, function () {
    return functorSeq;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableSeq)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return mapSeq((dictApplicative.Apply0()).Functor0())(Data_Traversable.traverse(Data_FingerTree.traversableFingerTree)(dictApplicative)(Data_Traversable.traverse(Data_Sequence_Internal.traversableElem)(dictApplicative)(f))(v));
        };
    };
});
var filter = function (p) {
    return function (v) {
        return Data_FingerTree.filter(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(p)(v);
    };
};
var eqSeq = function (dictEq) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            return Data_FingerTree.eqFingerTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(Data_Sequence_Internal.eqElem(dictEq))(v)(v1);
        };
    });
};
var ordSeq = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqSeq(dictOrd.Eq0());
    }, function (v) {
        return function (v1) {
            return Data_FingerTree.compareFingerTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(Data_Sequence_Internal.ordElem(dictOrd))(v)(v1);
        };
    });
};
var empty = Data_FingerTree.Empty.value;
var drop = function (i) {
    return function ($112) {
        return Data_Lazy.force(Data_Tuple.snd(splitAt$prime(i)($112)));
    };
};
var cons = function (x) {
    return function (v) {
        return Data_FingerTree.cons(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(x)(v);
    };
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(cons)(empty);
};
var singleton = function (x) {
    return cons(x)(empty);
};
var unfoldableSeq = new Data_Unfoldable.Unfoldable(function (f) {
    return function (xs) {
        var v = f(xs);
        if (v instanceof Data_Maybe.Just) {
            return cons(v.value0.value0)(Data_Unfoldable.unfoldr(unfoldableSeq)(f)(v.value0.value1));
        };
        if (v instanceof Data_Maybe.Nothing) {
            return empty;
        };
        throw new Error("Failed pattern match at Data.Sequence line 126, column 18 - line 128, column 45: " + [ v.constructor.name ]);
    };
});
var sort = function (dictOrd) {
    return Data_Sequence_Ordered.sort(functorSeq)(foldableSeq)(unfoldableSeq)(dictOrd);
};
var append = function (v) {
    return function (v1) {
        return Data_FingerTree.append(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v)(v1);
    };
};
var concat = Data_Foldable.foldr(foldableSeq)(append)(empty);
var concatMap = function (f) {
    return function ($113) {
        return concat(map(f)($113));
    };
};
var monadSeq = new Control_Monad.Monad(function () {
    return applicativeSeq;
}, function () {
    return bindSeq;
});
var bindSeq = new Control_Bind.Bind(function () {
    return applySeq;
}, Data_Function.flip(concatMap));
var applySeq = new Control_Apply.Apply(function () {
    return functorSeq;
}, Control_Monad.ap(monadSeq));
var applicativeSeq = new Control_Applicative.Applicative(function () {
    return applySeq;
}, singleton);
var semigroupSeq = new Data_Semigroup.Semigroup(append);
var monoidSeq = new Data_Monoid.Monoid(function () {
    return semigroupSeq;
}, empty);
var altSeq = new Control_Alt.Alt(function () {
    return functorSeq;
}, append);
var plusSeq = new Control_Plus.Plus(function () {
    return altSeq;
}, empty);
var alternativeSeq = new Control_Alternative.Alternative(function () {
    return applicativeSeq;
}, function () {
    return plusSeq;
});
var monadZeroSeq = new Control_MonadZero.MonadZero(function () {
    return alternativeSeq;
}, function () {
    return monadSeq;
});
var monadPlusSeq = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroSeq;
});
var adjust = function (f) {
    return function (i) {
        return function (xs) {
            var $110 = inBounds(i)(xs);
            if ($110) {
                return unsafeAdjust()(f)(i)(xs);
            };
            return xs;
        };
    };
};
var replace = function (x) {
    return adjust(Data_Function["const"](x));
};
module.exports = {
    empty: empty,
    singleton: singleton,
    cons: cons,
    snoc: snoc,
    append: append,
    map: map,
    concat: concat,
    concatMap: concatMap,
    fromFoldable: fromFoldable,
    length: length,
    "null": $$null,
    inBounds: inBounds,
    uncons: uncons,
    unsnoc: unsnoc,
    head: head,
    tail: tail,
    init: init,
    last: last,
    splitAt: splitAt,
    take: take,
    drop: drop,
    filter: filter,
    sort: sort,
    index: index,
    adjust: adjust,
    replace: replace,
    toUnfoldable: toUnfoldable,
    fullyForce: fullyForce,
    ordSeq: ordSeq,
    eqSeq: eqSeq,
    showSeq: showSeq,
    semigroupSeq: semigroupSeq,
    monoidSeq: monoidSeq,
    foldableSeq: foldableSeq,
    traversableSeq: traversableSeq,
    unfoldableSeq: unfoldableSeq,
    functorSeq: functorSeq,
    applySeq: applySeq,
    applicativeSeq: applicativeSeq,
    bindSeq: bindSeq,
    monadSeq: monadSeq,
    altSeq: altSeq,
    plusSeq: plusSeq,
    alternativeSeq: alternativeSeq,
    monadPlusSeq: monadPlusSeq,
    monadZeroSeq: monadZeroSeq
};
