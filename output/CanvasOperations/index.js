// Generated by purs version 0.11.7
"use strict";
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Data_Array = require("../Data.Array");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Fingering = require("../Fingering");
var Fret = require("../Fret");
var Graphics_Canvas = require("../Graphics.Canvas");
var $$Math = require("../Math");
var NeckData = require("../NeckData");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var wipe_neck = Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
    var v = Graphics_Canvas.getCanvasElementById("guitar_notes")();
    var __unused = function (dictPartial1) {
        return function ($dollar17) {
            return $dollar17;
        };
    };
    return __unused()((function () {
        if (v instanceof Data_Maybe.Just) {
            return function __do() {
                var v1 = Graphics_Canvas.getContext2D(v.value0)();
                var v2 = Graphics_Canvas.getCanvasDimensions(v.value0)();
                return Graphics_Canvas.clearRect(v1)({
                    x: 0.0,
                    y: 0.0,
                    w: v2.width,
                    h: v2.height
                })();
            };
        };
        throw new Error("Failed pattern match at CanvasOperations line 115, column 3 - line 116, column 3: " + [ v.constructor.name ]);
    })())();
});
var string_color = "#dddddd";
var paint_strings = function (v) {
    var gauges = [ 0.254, 0.3302, 0.4318, 0.6604, 0.9144, 1.1684 ];
    var single_string = function (n) {
        return function (g) {
            return Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Graphics_Canvas.beginPath(v.value0))(Graphics_Canvas.fillRect(v.value0)({
                x: v.value1.x_offset,
                y: NeckData.str_y(v.value1)(Data_Int.toNumber(n)),
                w: v.value1.width,
                h: (v.value1.height * g) / 50.0
            }));
        };
    };
    return Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Graphics_Canvas.setFillStyle(string_color)(v.value0))(Data_Foldable.sequence_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(Data_Array.zipWith(single_string)(Data_Array.range(0)(5))(gauges)));
};
var paint_number = function (v) {
    return function (num) {
        var y_pos = Data_Ord.max(Data_Ord.ordNumber)(Data_Int.toNumber(14))(NeckData.str_y(v.value1)(0.0) - v.value1.y_offset);
        return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
            var v1 = Graphics_Canvas.setFont(Data_Show.show(Data_Show.showInt)(14) + "px Georgia")(v.value0)();
            var v2 = Graphics_Canvas.setFillStyle("#000000")(v.value0)();
            var v3 = Graphics_Canvas.measureText(v.value0)(Data_Show.show(Data_Show.showInt)(num))();
            return Graphics_Canvas.fillText(v.value0)(Data_Show.show(Data_Show.showInt)(num))(NeckData.fret_marker(v.value1)(num) - v3.width * 0.5)(y_pos)();
        });
    };
};
var neck_color = "#edc889";
var inlay_radius = 5.0;
var inlay_color = "#dddddd";
var fret_width = 2.0;
var fret_color = "#000000";
var paint_fret = function (v) {
    return function (fret) {
        return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Graphics_Canvas.setFillStyle(fret_color)(v.value0))(Graphics_Canvas.fillRect(v.value0)({
            x: NeckData.fret_x(v.value1)(Data_Int.toNumber(fret)) - fret_width * 0.5,
            y: v.value1.y_offset,
            w: fret_width,
            h: v.value1.height
        })));
    };
};
var circle = function (c) {
    return {
        x: c.x,
        y: c.y,
        r: c.r,
        start: 0.0,
        end: 2.0 * $$Math.pi
    };
};
var paint_inlays = function (v) {
    var y = NeckData.str_y(v.value1);
    var x = NeckData.fret_marker(v.value1)(12);
    var single_inlay = function (v1) {
        return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Canvas.beginPath(v.value0))(Data_Function.flip(Graphics_Canvas.arc)(circle({
            x: v1.x,
            y: v1.y,
            r: inlay_radius
        }))))(Graphics_Canvas.fill));
    };
    var middle_y = y(2.5);
    var inlay_points = Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Fingering.point(x)(y(0.5)), Fingering.point(x)(y(4.5)) ])(Data_Functor.map(Data_Functor.functorArray)(function (x1) {
        return Fingering.point(NeckData.fret_marker(v.value1)(x1))(y(2.5));
    })([ 3, 5, 7, 9, 15, 17, 19, 21 ]));
    return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Graphics_Canvas.setFillStyle(inlay_color)(v.value0))(Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(single_inlay)(inlay_points)));
};
var paint_neck = function (neck) {
    return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
        var v = Graphics_Canvas.getCanvasElementById("guitar_neck")();
        var __unused = function (dictPartial1) {
            return function ($dollar21) {
                return $dollar21;
            };
        };
        return __unused()((function () {
            if (v instanceof Data_Maybe.Just) {
                return function __do() {
                    var v1 = Graphics_Canvas.getContext2D(v.value0)();
                    var tuple = new Data_Tuple.Tuple(v1, neck);
                    return Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Graphics_Canvas.setFillStyle(neck_color)(v1))(Graphics_Canvas.fillRect(v1)({
                        x: neck.x_offset,
                        y: neck.y_offset,
                        w: neck.width,
                        h: neck.height
                    })))(Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(paint_fret(tuple))(Data_Array.range(0)(neck.num_frets))))(paint_inlays(tuple)))(paint_strings(tuple)))(Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(paint_number(tuple))(Data_Array.range(1)(neck.num_frets)))();
                };
            };
            throw new Error("Failed pattern match at CanvasOperations line 34, column 3 - line 35, column 3: " + [ v.constructor.name ]);
        })())();
    });
};
var chord_color = "#ee1122";
var paint_chord = function (neck) {
    return function (fingering) {
        var paint_fingering = function (ctx) {
            return function (v) {
                return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Canvas.setFillStyle(chord_color)(ctx))(Graphics_Canvas.beginPath))(Data_Function.flip(Graphics_Canvas.arc)(circle({
                    x: v.x,
                    y: v.y,
                    r: 8.5
                }))))(Graphics_Canvas.fill));
            };
        };
        return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
            var v = Graphics_Canvas.getCanvasElementById("guitar_notes")();
            var __unused = function (dictPartial1) {
                return function ($dollar25) {
                    return $dollar25;
                };
            };
            return __unused()((function () {
                if (v instanceof Data_Maybe.Just) {
                    return function __do() {
                        var v1 = Graphics_Canvas.getContext2D(v.value0)();
                        return Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Graphics_Canvas.setGlobalAlpha(v1)(0.35))(Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(paint_fingering(v1))(Fingering.to_points(neck)(fingering))))(Graphics_Canvas.setGlobalAlpha(v1)(1.0))();
                    };
                };
                throw new Error("Failed pattern match at CanvasOperations line 98, column 3 - line 99, column 3: " + [ v.constructor.name ]);
            })())();
        });
    };
};
module.exports = {
    paint_neck: paint_neck,
    paint_chord: paint_chord,
    wipe_neck: wipe_neck
};
