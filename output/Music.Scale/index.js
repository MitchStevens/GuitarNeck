// Generated by purs version 0.11.7
"use strict";
var Control_Bind = require("../Control.Bind");
var Data_Array = require("../Data.Array");
var Data_Enum = require("../Data.Enum");
var Data_Eq = require("../Data.Eq");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_Traversable = require("../Data.Traversable");
var Debug_Trace = require("../Debug.Trace");
var Music_Degree = require("../Music.Degree");
var Music_Extension = require("../Music.Extension");
var Music_Key = require("../Music.Key");
var Music_Mode = require("../Music.Mode");
var Music_Note = require("../Music.Note");
var Music_Transpose = require("../Music.Transpose");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Scale = (function () {
    function Scale(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Scale.create = function (value0) {
        return function (value1) {
            return new Scale(value0, value1);
        };
    };
    return Scale;
})();
var show_scale = new Data_Show.Show(function (v) {
    return Data_Show.show(Music_Note.show_pitch)(v.value0) + (Data_Show.show(Music_Mode.show_mode)(v.value1) + " scale");
});
var get_note = function (dictPartial) {
    return function (v) {
        return function (n) {
            var m = Music_Mode.num_notes(v.value1);
            var octaves = n / m | 0;
            var ints = Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_Array.take(n % m)(Music_Mode.intervals(v.value1)));
            var $24 = n < 0;
            if ($24) {
                return Partial_Unsafe.unsafeCrashWith("Index must be > 0");
            };
            return Music_Transpose.trans(Music_Note.transpose_pitch)((12 * octaves | 0) + ints | 0)(v.value0);
        };
    };
};
var find_extension = function (v) {
    return function (ext) {
        var scale = new Scale(v.value1, v.value0.mode);
        var deg = Music_Extension.degree(ext) - 1 | 0;
        var accidental = (function () {
            if (ext instanceof Music_Extension.Flat) {
                return -1 | 0;
            };
            if (ext instanceof Music_Extension.Add) {
                return 0;
            };
            if (ext instanceof Music_Extension.Sharp) {
                return 1;
            };
            if (ext instanceof Music_Extension.Sus2) {
                return 0;
            };
            if (ext instanceof Music_Extension.Sus4) {
                return 0;
            };
            throw new Error("Failed pattern match at Music.Scale line 60, column 18 - line 67, column 1: " + [ ext.constructor.name ]);
        })();
        return Music_Transpose.trans(Music_Note.transpose_pitch)(accidental)(get_note()(scale)(deg));
    };
};
var find_degree = function (v) {
    return function (degree) {
        var scale = new Scale(v.value1, v.value0.mode);
        return get_note()(scale)(Data_Enum.fromEnum(Music_Degree.boundedenum_degree)(degree));
    };
};
var eq_scale = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Music_Note.eq_pitch)(x.value0)(y.value0) && Data_Eq.eq(Music_Mode.eq_mode)(x.value1)(y.value1);
    };
});
var as_array = function (v) {
    return function (n) {
        var ints = Data_Monoid.power(Data_Monoid.monoidArray)(Music_Mode.intervals(v.value1))(1 + (n / 7 | 0) | 0);
        return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ v.value0 ])(Data_Traversable.scanl(Data_Traversable.traversableArray)(Data_Function.flip(Music_Transpose.trans(Music_Note.transpose_pitch)))(v.value0)(Data_Array.take(n - 1 | 0)(ints)));
    };
};
var belongs_to = function (pc1) {
    return function (key) {
        var notes = as_array(new Scale(Music_Note.mk_pitch(key.pitch)(0), key.mode))(7);
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.findIndex(function (v) {
            return Music_Note.pcToInt(pc1) === Music_Note.pcToInt(v.value0);
        })(notes))(function (v) {
            return Data_Enum.toEnum(Music_Degree.boundedenum_degree)(v);
        });
    };
};
var pitch_as_degree = function (v) {
    return belongs_to(v.value1.value0)(v.value0);
};
var in_scale = function (scale) {
    return function (v) {
        return Data_Array.findIndex(function (v1) {
            return Data_Eq.eq(Music_Note.eq_pitchclass)(v.value0)(v1.value0);
        })(as_array(scale)(7));
    };
};
module.exports = {
    as_array: as_array,
    in_scale: in_scale,
    pitch_as_degree: pitch_as_degree,
    find_extension: find_extension,
    find_degree: find_degree,
    belongs_to: belongs_to,
    Scale: Scale,
    eq_scale: eq_scale,
    show_scale: show_scale
};
