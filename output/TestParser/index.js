// Generated by purs version 0.11.7
"use strict";
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_AVar = require("../Control.Monad.Eff.AVar");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_Free = require("../Control.Monad.Free");
var Data_Argonaut_Core = require("../Data.Argonaut.Core");
var Data_Argonaut_Parser = require("../Data.Argonaut.Parser");
var Data_Array = require("../Data.Array");
var Data_Either = require("../Data.Either");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_StrMap = require("../Data.StrMap");
var Data_String = require("../Data.String");
var Fingering = require("../Fingering");
var Fret = require("../Fret");
var JsonParser = require("../JsonParser");
var Parser = require("../Parser");
var Prelude = require("../Prelude");
var Test_Unit = require("../Test.Unit");
var Test_Unit_Console = require("../Test.Unit.Console");
var Test_Unit_Main = require("../Test.Unit.Main");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var test_strmap1 = Data_Argonaut_Parser.jsonParser("{\x0a  \"maj\": [\"x-3-5-5-5-3\", \"x-x-5-5-5-8\", \"8-10-10-9-8-8\", \"x-x-10-12-x-12\"],\x0a  \"min\": [\"x-3-5-5-4-3\", \"8-10-10-8-8-8\", \"x-x-13-12-13-11\"],\x0a  \"dim\": [\"x-x-1-2-1-2\", \"x-x-4-5-4-5\", \"x-x-7-8-7-8\", \"x-x-10-11-10-11\"],\x0a\x09\"aug\": [\"x-3-2-1-1-x\", \"x-x-10-9-9-8\"],\x0a\x09\"maj7\": [\"x-3-5-4-5-x\", \"8-x-9-9-8-x\", \"x-x-5-5-5-7\", \"x-x-10-9-8-7\", \"x-x-10-12-12-12\"],\x0a\x09\"min7\": [\"x-3-1-3-4-x\", \"x-3-5-3-4-3\", \"x-x-5-5-4-6\", \"8-x-8-8-8-x\", \"x-10-8-8-11-x\"],\x0a\x09\"7\": [\"x-3-2-3-1-x\", \"x-x-5-5-5-6\", \"8-10-8-9-8-8\", \"x-x-10-12-11-12\"],\x0a\x09\"min7(b5)\": [\"x-3-4-3-4-x\", \"x-x-4-5-4-6\", \"8-x-8-8-7-x\", \"x-x-10-11-11-11\"]\x0a}\x0a");
var test_chords = [ "x-3-5-5-5-3", "x-x-5-5-5-8", "8-10-10-9-8-8", "x-x-10-12-x-12", "x-3-5-5-4-3", "8-10-10-8-8-8", "x-x-13-12-13-11", "x-x-1-2-1-2", "x-x-4-5-4-5", "x-x-7-8-7-8", "x-x-10-11-10-11", "x-3-2-1-1-x", "x-x-10-9-9-8", "x-3-5-4-5-x", "8-x-9-9-8-x", "x-x-5-5-5-7", "x-x-10-9-8-7", "x-x-10-12-12-12", "x-3-1-3-4-x", "x-3-5-3-4-3", "x-x-5-5-4-6", "8-x-8-8-8-x", "x-10-8-8-11-x", "x-3-2-3-1-x", "x-x-5-5-5-6", "8-10-8-9-8-8", "x-x-10-12-11-12", "x-3-4-3-4-x", "x-x-4-5-4-6", "8-x-8-8-7-x", "x-x-10-11-11-11" ];
var parse_strmap_test = (function () {
    var v = Control_Bind.bind(Data_Either.bindEither)(test_strmap1)(JsonParser.decode_fingering_map);
    if (v instanceof Data_Either.Left) {
        return Test_Unit.failure(v.value0);
    };
    if (v instanceof Data_Either.Right) {
        var $4 = Data_StrMap.size(v.value0) === 8;
        if ($4) {
            return Test_Unit.success;
        };
        return Test_Unit.failure("didn't parse " + (Data_Show.show(Data_Either.showEither(Data_Show.showString)(Data_Argonaut_Core.showJson))(test_strmap1) + " properly!"));
    };
    throw new Error("Failed pattern match at TestParser line 58, column 21 - line 61, column 58: " + [ v.constructor.name ]);
})();
var parse_chord_fingering_test = function (str) {
    var v = Text_Parsing_Parser.runParser(str)(Parser.parse_fingering);
    if (v instanceof Data_Either.Left) {
        return Test_Unit.failure("didn't parse " + (str + " properly!"));
    };
    if (v instanceof Data_Either.Right) {
        return Test_Unit.success;
    };
    throw new Error("Failed pattern match at TestParser line 53, column 34 - line 55, column 21: " + [ v.constructor.name ]);
};
var run_tests = Test_Unit_Main.runTest(Test_Unit.suite("parse json")(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Test_Unit.test("chord_fingerings")(Data_Foldable.traverse_(Control_Monad_Aff.applicativeAff)(Data_Foldable.foldableArray)(parse_chord_fingering_test)(test_chords)))(function () {
    return Test_Unit.test("strmap fingerings")(parse_strmap_test);
})));
module.exports = {
    test_chords: test_chords,
    test_strmap1: test_strmap1,
    run_tests: run_tests,
    parse_chord_fingering_test: parse_chord_fingering_test,
    parse_strmap_test: parse_strmap_test
};
