// Generated by purs version 0.11.7
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Category = require("../Control.Category");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Identity = require("../Data.Identity");
var Data_Newtype = require("../Data.Newtype");
var Data_Unit = require("../Data.Unit");
var Graphics_Canvas = require("../Graphics.Canvas");
var Prelude = require("../Prelude");
var SetLineWidth = (function () {
    function SetLineWidth(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetLineWidth.create = function (value0) {
        return function (value1) {
            return new SetLineWidth(value0, value1);
        };
    };
    return SetLineWidth;
})();
var SetFillStyle = (function () {
    function SetFillStyle(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetFillStyle.create = function (value0) {
        return function (value1) {
            return new SetFillStyle(value0, value1);
        };
    };
    return SetFillStyle;
})();
var SetStrokeStyle = (function () {
    function SetStrokeStyle(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetStrokeStyle.create = function (value0) {
        return function (value1) {
            return new SetStrokeStyle(value0, value1);
        };
    };
    return SetStrokeStyle;
})();
var SetShadowColor = (function () {
    function SetShadowColor(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetShadowColor.create = function (value0) {
        return function (value1) {
            return new SetShadowColor(value0, value1);
        };
    };
    return SetShadowColor;
})();
var SetShadowBlur = (function () {
    function SetShadowBlur(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetShadowBlur.create = function (value0) {
        return function (value1) {
            return new SetShadowBlur(value0, value1);
        };
    };
    return SetShadowBlur;
})();
var SetShadowOffsetX = (function () {
    function SetShadowOffsetX(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetShadowOffsetX.create = function (value0) {
        return function (value1) {
            return new SetShadowOffsetX(value0, value1);
        };
    };
    return SetShadowOffsetX;
})();
var SetShadowOffsetY = (function () {
    function SetShadowOffsetY(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetShadowOffsetY.create = function (value0) {
        return function (value1) {
            return new SetShadowOffsetY(value0, value1);
        };
    };
    return SetShadowOffsetY;
})();
var SetLineCap = (function () {
    function SetLineCap(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetLineCap.create = function (value0) {
        return function (value1) {
            return new SetLineCap(value0, value1);
        };
    };
    return SetLineCap;
})();
var SetComposite = (function () {
    function SetComposite(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetComposite.create = function (value0) {
        return function (value1) {
            return new SetComposite(value0, value1);
        };
    };
    return SetComposite;
})();
var SetAlpha = (function () {
    function SetAlpha(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetAlpha.create = function (value0) {
        return function (value1) {
            return new SetAlpha(value0, value1);
        };
    };
    return SetAlpha;
})();
var BeginPath = (function () {
    function BeginPath(value0) {
        this.value0 = value0;
    };
    BeginPath.create = function (value0) {
        return new BeginPath(value0);
    };
    return BeginPath;
})();
var Stroke = (function () {
    function Stroke(value0) {
        this.value0 = value0;
    };
    Stroke.create = function (value0) {
        return new Stroke(value0);
    };
    return Stroke;
})();
var Fill = (function () {
    function Fill(value0) {
        this.value0 = value0;
    };
    Fill.create = function (value0) {
        return new Fill(value0);
    };
    return Fill;
})();
var Clip = (function () {
    function Clip(value0) {
        this.value0 = value0;
    };
    Clip.create = function (value0) {
        return new Clip(value0);
    };
    return Clip;
})();
var LineTo = (function () {
    function LineTo(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    LineTo.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new LineTo(value0, value1, value2);
            };
        };
    };
    return LineTo;
})();
var MoveTo = (function () {
    function MoveTo(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    MoveTo.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new MoveTo(value0, value1, value2);
            };
        };
    };
    return MoveTo;
})();
var ClosePath = (function () {
    function ClosePath(value0) {
        this.value0 = value0;
    };
    ClosePath.create = function (value0) {
        return new ClosePath(value0);
    };
    return ClosePath;
})();
var Arc = (function () {
    function Arc(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Arc.create = function (value0) {
        return function (value1) {
            return new Arc(value0, value1);
        };
    };
    return Arc;
})();
var Rect = (function () {
    function Rect(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Rect.create = function (value0) {
        return function (value1) {
            return new Rect(value0, value1);
        };
    };
    return Rect;
})();
var FillRect = (function () {
    function FillRect(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    FillRect.create = function (value0) {
        return function (value1) {
            return new FillRect(value0, value1);
        };
    };
    return FillRect;
})();
var StrokeRect = (function () {
    function StrokeRect(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    StrokeRect.create = function (value0) {
        return function (value1) {
            return new StrokeRect(value0, value1);
        };
    };
    return StrokeRect;
})();
var ClearRect = (function () {
    function ClearRect(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ClearRect.create = function (value0) {
        return function (value1) {
            return new ClearRect(value0, value1);
        };
    };
    return ClearRect;
})();
var Scale = (function () {
    function Scale(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Scale.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Scale(value0, value1, value2);
            };
        };
    };
    return Scale;
})();
var Rotate = (function () {
    function Rotate(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Rotate.create = function (value0) {
        return function (value1) {
            return new Rotate(value0, value1);
        };
    };
    return Rotate;
})();
var Translate = (function () {
    function Translate(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Translate.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Translate(value0, value1, value2);
            };
        };
    };
    return Translate;
})();
var Transform = (function () {
    function Transform(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Transform.create = function (value0) {
        return function (value1) {
            return new Transform(value0, value1);
        };
    };
    return Transform;
})();
var TextAlign = (function () {
    function TextAlign(value0) {
        this.value0 = value0;
    };
    TextAlign.create = function (value0) {
        return new TextAlign(value0);
    };
    return TextAlign;
})();
var SetTextAlign = (function () {
    function SetTextAlign(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetTextAlign.create = function (value0) {
        return function (value1) {
            return new SetTextAlign(value0, value1);
        };
    };
    return SetTextAlign;
})();
var Font = (function () {
    function Font(value0) {
        this.value0 = value0;
    };
    Font.create = function (value0) {
        return new Font(value0);
    };
    return Font;
})();
var SetFont = (function () {
    function SetFont(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetFont.create = function (value0) {
        return function (value1) {
            return new SetFont(value0, value1);
        };
    };
    return SetFont;
})();
var FillText = (function () {
    function FillText(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    FillText.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new FillText(value0, value1, value2, value3);
                };
            };
        };
    };
    return FillText;
})();
var StrokeText = (function () {
    function StrokeText(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    StrokeText.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new StrokeText(value0, value1, value2, value3);
                };
            };
        };
    };
    return StrokeText;
})();
var MeasureText = (function () {
    function MeasureText(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    MeasureText.create = function (value0) {
        return function (value1) {
            return new MeasureText(value0, value1);
        };
    };
    return MeasureText;
})();
var Save = (function () {
    function Save(value0) {
        this.value0 = value0;
    };
    Save.create = function (value0) {
        return new Save(value0);
    };
    return Save;
})();
var Restore = (function () {
    function Restore(value0) {
        this.value0 = value0;
    };
    Restore.create = function (value0) {
        return new Restore(value0);
    };
    return Restore;
})();
var GetImageData = (function () {
    function GetImageData(value0, value1, value2, value3, value4) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
    };
    GetImageData.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return new GetImageData(value0, value1, value2, value3, value4);
                    };
                };
            };
        };
    };
    return GetImageData;
})();
var PutImageData = (function () {
    function PutImageData(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    PutImageData.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new PutImageData(value0, value1, value2, value3);
                };
            };
        };
    };
    return PutImageData;
})();
var PutImageDataFull = (function () {
    function PutImageDataFull(value0, value1, value2, value3, value4, value5, value6, value7) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
        this.value7 = value7;
    };
    PutImageDataFull.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return function (value6) {
                                return function (value7) {
                                    return new PutImageDataFull(value0, value1, value2, value3, value4, value5, value6, value7);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    return PutImageDataFull;
})();
var CreateImageData = (function () {
    function CreateImageData(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    CreateImageData.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new CreateImageData(value0, value1, value2);
            };
        };
    };
    return CreateImageData;
})();
var CreateImageDataCopy = (function () {
    function CreateImageDataCopy(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CreateImageDataCopy.create = function (value0) {
        return function (value1) {
            return new CreateImageDataCopy(value0, value1);
        };
    };
    return CreateImageDataCopy;
})();
var DrawImage = (function () {
    function DrawImage(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    DrawImage.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new DrawImage(value0, value1, value2, value3);
                };
            };
        };
    };
    return DrawImage;
})();
var DrawImageScale = (function () {
    function DrawImageScale(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    DrawImageScale.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new DrawImageScale(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return DrawImageScale;
})();
var DrawImageFull = (function () {
    function DrawImageFull(value0, value1, value2, value3, value4, value5, value6, value7, value8, value9) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
        this.value7 = value7;
        this.value8 = value8;
        this.value9 = value9;
    };
    DrawImageFull.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return function (value6) {
                                return function (value7) {
                                    return function (value8) {
                                        return function (value9) {
                                            return new DrawImageFull(value0, value1, value2, value3, value4, value5, value6, value7, value8, value9);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    return DrawImageFull;
})();
var interpretGraphics = function (ctx) {
    var go = function (v) {
        if (v instanceof SetLineWidth) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setLineWidth(v.value0)(ctx));
        };
        if (v instanceof SetFillStyle) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setFillStyle(v.value0)(ctx));
        };
        if (v instanceof SetStrokeStyle) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setStrokeStyle(v.value0)(ctx));
        };
        if (v instanceof SetShadowColor) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setShadowColor(v.value0)(ctx));
        };
        if (v instanceof SetShadowBlur) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setShadowBlur(v.value0)(ctx));
        };
        if (v instanceof SetShadowOffsetX) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setShadowOffsetX(v.value0)(ctx));
        };
        if (v instanceof SetShadowOffsetY) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setShadowOffsetY(v.value0)(ctx));
        };
        if (v instanceof SetLineCap) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setLineCap(v.value0)(ctx));
        };
        if (v instanceof SetComposite) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setGlobalCompositeOperation(ctx)(v.value0));
        };
        if (v instanceof SetAlpha) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setGlobalAlpha(ctx)(v.value0));
        };
        if (v instanceof BeginPath) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.beginPath(ctx));
        };
        if (v instanceof Stroke) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.stroke(ctx));
        };
        if (v instanceof Fill) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.fill(ctx));
        };
        if (v instanceof Clip) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.clip(ctx));
        };
        if (v instanceof LineTo) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value2))(Graphics_Canvas.lineTo(ctx)(v.value0)(v.value1));
        };
        if (v instanceof MoveTo) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value2))(Graphics_Canvas.moveTo(ctx)(v.value0)(v.value1));
        };
        if (v instanceof ClosePath) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.closePath(ctx));
        };
        if (v instanceof Arc) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.arc(ctx)(v.value0));
        };
        if (v instanceof Rect) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.rect(ctx)(v.value0));
        };
        if (v instanceof FillRect) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.fillRect(ctx)(v.value0));
        };
        if (v instanceof StrokeRect) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.strokeRect(ctx)(v.value0));
        };
        if (v instanceof ClearRect) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.clearRect(ctx)(v.value0));
        };
        if (v instanceof Scale) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value2))(Graphics_Canvas.scale({
                scaleX: v.value0,
                scaleY: v.value1
            })(ctx));
        };
        if (v instanceof Rotate) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.rotate(v.value0)(ctx));
        };
        if (v instanceof Translate) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value2))(Graphics_Canvas.translate({
                translateX: v.value0,
                translateY: v.value1
            })(ctx));
        };
        if (v instanceof Transform) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.transform(v.value0)(ctx));
        };
        if (v instanceof TextAlign) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value0)(Graphics_Canvas.textAlign(ctx));
        };
        if (v instanceof SetTextAlign) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setTextAlign(ctx)(v.value0));
        };
        if (v instanceof Font) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value0)(Graphics_Canvas.font(ctx));
        };
        if (v instanceof SetFont) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setFont(v.value0)(ctx));
        };
        if (v instanceof FillText) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value3))(Graphics_Canvas.fillText(ctx)(v.value0)(v.value1)(v.value2));
        };
        if (v instanceof StrokeText) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value3))(Graphics_Canvas.strokeText(ctx)(v.value0)(v.value1)(v.value2));
        };
        if (v instanceof MeasureText) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value1)(Graphics_Canvas.measureText(ctx)(v.value0));
        };
        if (v instanceof Save) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.save(ctx));
        };
        if (v instanceof Restore) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.restore(ctx));
        };
        if (v instanceof GetImageData) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value4)(Graphics_Canvas.getImageData(ctx)(v.value0)(v.value1)(v.value2)(v.value3));
        };
        if (v instanceof PutImageData) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value3))(Graphics_Canvas.putImageData(ctx)(v.value0)(v.value1)(v.value2));
        };
        if (v instanceof PutImageDataFull) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value7))(Graphics_Canvas.putImageDataFull(ctx)(v.value0)(v.value1)(v.value2)(v.value3)(v.value4)(v.value5)(v.value6));
        };
        if (v instanceof CreateImageData) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value2)(Graphics_Canvas.createImageData(ctx)(v.value0)(v.value1));
        };
        if (v instanceof CreateImageDataCopy) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value1)(Graphics_Canvas.createImageDataCopy(ctx)(v.value0));
        };
        if (v instanceof DrawImage) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value3))(Graphics_Canvas.drawImage(ctx)(v.value0)(v.value1)(v.value2));
        };
        if (v instanceof DrawImageScale) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value5))(Graphics_Canvas.drawImageScale(ctx)(v.value0)(v.value1)(v.value2)(v.value3)(v.value4));
        };
        if (v instanceof DrawImageFull) {
            return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value9))(Graphics_Canvas.drawImageFull(ctx)(v.value0)(v.value1)(v.value2)(v.value3)(v.value4)(v.value5)(v.value6)(v.value7)(v.value8));
        };
        throw new Error("Failed pattern match at Graphics.Canvas.Free line 259, column 3 - line 260, column 42: " + [ v.constructor.name ]);
    };
    return go;
};
var functorGraphicsF = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof SetLineWidth) {
            return new SetLineWidth(m.value0, f(m.value1));
        };
        if (m instanceof SetFillStyle) {
            return new SetFillStyle(m.value0, f(m.value1));
        };
        if (m instanceof SetStrokeStyle) {
            return new SetStrokeStyle(m.value0, f(m.value1));
        };
        if (m instanceof SetShadowColor) {
            return new SetShadowColor(m.value0, f(m.value1));
        };
        if (m instanceof SetShadowBlur) {
            return new SetShadowBlur(m.value0, f(m.value1));
        };
        if (m instanceof SetShadowOffsetX) {
            return new SetShadowOffsetX(m.value0, f(m.value1));
        };
        if (m instanceof SetShadowOffsetY) {
            return new SetShadowOffsetY(m.value0, f(m.value1));
        };
        if (m instanceof SetLineCap) {
            return new SetLineCap(m.value0, f(m.value1));
        };
        if (m instanceof SetComposite) {
            return new SetComposite(m.value0, f(m.value1));
        };
        if (m instanceof SetAlpha) {
            return new SetAlpha(m.value0, f(m.value1));
        };
        if (m instanceof BeginPath) {
            return new BeginPath(f(m.value0));
        };
        if (m instanceof Stroke) {
            return new Stroke(f(m.value0));
        };
        if (m instanceof Fill) {
            return new Fill(f(m.value0));
        };
        if (m instanceof Clip) {
            return new Clip(f(m.value0));
        };
        if (m instanceof LineTo) {
            return new LineTo(m.value0, m.value1, f(m.value2));
        };
        if (m instanceof MoveTo) {
            return new MoveTo(m.value0, m.value1, f(m.value2));
        };
        if (m instanceof ClosePath) {
            return new ClosePath(f(m.value0));
        };
        if (m instanceof Arc) {
            return new Arc(m.value0, f(m.value1));
        };
        if (m instanceof Rect) {
            return new Rect(m.value0, f(m.value1));
        };
        if (m instanceof FillRect) {
            return new FillRect(m.value0, f(m.value1));
        };
        if (m instanceof StrokeRect) {
            return new StrokeRect(m.value0, f(m.value1));
        };
        if (m instanceof ClearRect) {
            return new ClearRect(m.value0, f(m.value1));
        };
        if (m instanceof Scale) {
            return new Scale(m.value0, m.value1, f(m.value2));
        };
        if (m instanceof Rotate) {
            return new Rotate(m.value0, f(m.value1));
        };
        if (m instanceof Translate) {
            return new Translate(m.value0, m.value1, f(m.value2));
        };
        if (m instanceof Transform) {
            return new Transform(m.value0, f(m.value1));
        };
        if (m instanceof TextAlign) {
            return new TextAlign(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
        };
        if (m instanceof SetTextAlign) {
            return new SetTextAlign(m.value0, f(m.value1));
        };
        if (m instanceof Font) {
            return new Font(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
        };
        if (m instanceof SetFont) {
            return new SetFont(m.value0, f(m.value1));
        };
        if (m instanceof FillText) {
            return new FillText(m.value0, m.value1, m.value2, f(m.value3));
        };
        if (m instanceof StrokeText) {
            return new StrokeText(m.value0, m.value1, m.value2, f(m.value3));
        };
        if (m instanceof MeasureText) {
            return new MeasureText(m.value0, Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
        };
        if (m instanceof Save) {
            return new Save(f(m.value0));
        };
        if (m instanceof Restore) {
            return new Restore(f(m.value0));
        };
        if (m instanceof GetImageData) {
            return new GetImageData(m.value0, m.value1, m.value2, m.value3, Data_Functor.map(Data_Functor.functorFn)(f)(m.value4));
        };
        if (m instanceof PutImageData) {
            return new PutImageData(m.value0, m.value1, m.value2, f(m.value3));
        };
        if (m instanceof PutImageDataFull) {
            return new PutImageDataFull(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5, m.value6, f(m.value7));
        };
        if (m instanceof CreateImageData) {
            return new CreateImageData(m.value0, m.value1, Data_Functor.map(Data_Functor.functorFn)(f)(m.value2));
        };
        if (m instanceof CreateImageDataCopy) {
            return new CreateImageDataCopy(m.value0, Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
        };
        if (m instanceof DrawImage) {
            return new DrawImage(m.value0, m.value1, m.value2, f(m.value3));
        };
        if (m instanceof DrawImageScale) {
            return new DrawImageScale(m.value0, m.value1, m.value2, m.value3, m.value4, f(m.value5));
        };
        if (m instanceof DrawImageFull) {
            return new DrawImageFull(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5, m.value6, m.value7, m.value8, f(m.value9));
        };
        throw new Error("Failed pattern match at Graphics.Canvas.Free line 105, column 8 - line 105, column 54: " + [ m.constructor.name ]);
    };
});
var liftGraphics = function (dictMonad) {
    return Control_Monad_Free_Trans.liftFreeT(functorGraphicsF)(dictMonad);
};
var getImageData = function (dictMonad) {
    return function (x) {
        return function (y) {
            return function (w) {
                return function (h) {
                    return liftGraphics(dictMonad)(new GetImageData(x, y, w, h, Control_Category.id(Control_Category.categoryFn)));
                };
            };
        };
    };
};
var lineTo = function (dictMonad) {
    return function (x) {
        return function (y) {
            return liftGraphics(dictMonad)(new LineTo(x, y, Data_Unit.unit));
        };
    };
};
var measureText = function (dictMonad) {
    return function (s) {
        return liftGraphics(dictMonad)(new MeasureText(s, Control_Category.id(Control_Category.categoryFn)));
    };
};
var moveTo = function (dictMonad) {
    return function (x) {
        return function (y) {
            return liftGraphics(dictMonad)(new MoveTo(x, y, Data_Unit.unit));
        };
    };
};
var putImageData = function (dictMonad) {
    return function (d) {
        return function (x) {
            return function (y) {
                return liftGraphics(dictMonad)(new PutImageData(d, x, y, Data_Unit.unit));
            };
        };
    };
};
var putImageDataFull = function (dictMonad) {
    return function (d) {
        return function (x) {
            return function (y) {
                return function (dx) {
                    return function (dy) {
                        return function (dw) {
                            return function (dh) {
                                return liftGraphics(dictMonad)(new PutImageDataFull(d, x, y, dx, dy, dw, dh, Data_Unit.unit));
                            };
                        };
                    };
                };
            };
        };
    };
};
var rect = function (dictMonad) {
    return function (r) {
        return liftGraphics(dictMonad)(new Rect(r, Data_Unit.unit));
    };
};
var restore = function (dictMonad) {
    return liftGraphics(dictMonad)(new Restore(Data_Unit.unit));
};
var rotate = function (dictMonad) {
    return function (th) {
        return liftGraphics(dictMonad)(new Rotate(th, Data_Unit.unit));
    };
};
var save = function (dictMonad) {
    return liftGraphics(dictMonad)(new Save(Data_Unit.unit));
};
var scale = function (dictMonad) {
    return function (sx) {
        return function (sy) {
            return liftGraphics(dictMonad)(new Scale(sx, sy, Data_Unit.unit));
        };
    };
};
var setAlpha = function (dictMonad) {
    return function (a) {
        return liftGraphics(dictMonad)(new SetAlpha(a, Data_Unit.unit));
    };
};
var setComposite = function (dictMonad) {
    return function (c) {
        return liftGraphics(dictMonad)(new SetComposite(c, Data_Unit.unit));
    };
};
var setFillStyle = function (dictMonad) {
    return function (s) {
        return liftGraphics(dictMonad)(new SetFillStyle(s, Data_Unit.unit));
    };
};
var setFont = function (dictMonad) {
    return function (f) {
        return liftGraphics(dictMonad)(new SetFont(f, Data_Unit.unit));
    };
};
var setLineCap = function (dictMonad) {
    return function (lc) {
        return liftGraphics(dictMonad)(new SetLineCap(lc, Data_Unit.unit));
    };
};
var setLineWidth = function (dictMonad) {
    return function (w) {
        return liftGraphics(dictMonad)(new SetLineWidth(w, Data_Unit.unit));
    };
};
var setShadowBlur = function (dictMonad) {
    return function (n) {
        return liftGraphics(dictMonad)(new SetShadowBlur(n, Data_Unit.unit));
    };
};
var setShadowColor = function (dictMonad) {
    return function (c) {
        return liftGraphics(dictMonad)(new SetShadowColor(c, Data_Unit.unit));
    };
};
var setShadowOffsetX = function (dictMonad) {
    return function (n) {
        return liftGraphics(dictMonad)(new SetShadowOffsetX(n, Data_Unit.unit));
    };
};
var setShadowOffsetY = function (dictMonad) {
    return function (n) {
        return liftGraphics(dictMonad)(new SetShadowOffsetY(n, Data_Unit.unit));
    };
};
var setStrokeStyle = function (dictMonad) {
    return function (s) {
        return liftGraphics(dictMonad)(new SetStrokeStyle(s, Data_Unit.unit));
    };
};
var setTextAlign = function (dictMonad) {
    return function (ta) {
        return liftGraphics(dictMonad)(new SetTextAlign(ta, Data_Unit.unit));
    };
};
var stroke = function (dictMonad) {
    return liftGraphics(dictMonad)(new Stroke(Data_Unit.unit));
};
var strokeRect = function (dictMonad) {
    return function (r) {
        return liftGraphics(dictMonad)(new StrokeRect(r, Data_Unit.unit));
    };
};
var strokeText = function (dictMonad) {
    return function (s) {
        return function (x) {
            return function (y) {
                return liftGraphics(dictMonad)(new StrokeText(s, x, y, Data_Unit.unit));
            };
        };
    };
};
var textAlign = function (dictMonad) {
    return liftGraphics(dictMonad)(new TextAlign(Control_Category.id(Control_Category.categoryFn)));
};
var transform = function (dictMonad) {
    return function (tx) {
        return liftGraphics(dictMonad)(new Transform(tx, Data_Unit.unit));
    };
};
var translate = function (dictMonad) {
    return function (tx) {
        return function (ty) {
            return liftGraphics(dictMonad)(new Translate(tx, ty, Data_Unit.unit));
        };
    };
};
var runGraphics = function (ctx) {
    return function ($382) {
        return Control_Monad_Free_Trans.runFreeT(functorGraphicsF)(Control_Monad_Rec_Class.monadRecEff)(interpretGraphics(ctx))(Control_Monad_Free_Trans.hoistFreeT(functorGraphicsF)(Control_Monad_Eff.functorEff)(function ($383) {
            return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($383));
        })($382));
    };
};
var runGraphicsT = function (ctx) {
    return Control_Monad_Free_Trans.runFreeT(functorGraphicsF)(Control_Monad_Rec_Class.monadRecEff)(interpretGraphics(ctx));
};
var font = function (dictMonad) {
    return liftGraphics(dictMonad)(new Font(Control_Category.id(Control_Category.categoryFn)));
};
var fillText = function (dictMonad) {
    return function (s) {
        return function (x) {
            return function (y) {
                return liftGraphics(dictMonad)(new FillText(s, x, y, Data_Unit.unit));
            };
        };
    };
};
var fillRect = function (dictMonad) {
    return function (r) {
        return liftGraphics(dictMonad)(new FillRect(r, Data_Unit.unit));
    };
};
var fill = function (dictMonad) {
    return liftGraphics(dictMonad)(new Fill(Data_Unit.unit));
};
var drawImageScale = function (dictMonad) {
    return function (src) {
        return function (x) {
            return function (y) {
                return function (w) {
                    return function (h) {
                        return liftGraphics(dictMonad)(new DrawImageScale(src, x, y, w, h, Data_Unit.unit));
                    };
                };
            };
        };
    };
};
var drawImageFull = function (dictMonad) {
    return function (src) {
        return function (sx) {
            return function (sy) {
                return function (sw) {
                    return function (sh) {
                        return function (dx) {
                            return function (dy) {
                                return function (dw) {
                                    return function (dh) {
                                        return liftGraphics(dictMonad)(new DrawImageFull(src, sx, sy, sw, sh, dx, dy, dw, dh, Data_Unit.unit));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var drawImage = function (dictMonad) {
    return function (src) {
        return function (x) {
            return function (y) {
                return liftGraphics(dictMonad)(new DrawImage(src, x, y, Data_Unit.unit));
            };
        };
    };
};
var createImageDataCopy = function (dictMonad) {
    return function (d) {
        return liftGraphics(dictMonad)(new CreateImageDataCopy(d, Control_Category.id(Control_Category.categoryFn)));
    };
};
var createImageData = function (dictMonad) {
    return function (w) {
        return function (h) {
            return liftGraphics(dictMonad)(new CreateImageData(w, h, Control_Category.id(Control_Category.categoryFn)));
        };
    };
};
var closePath = function (dictMonad) {
    return liftGraphics(dictMonad)(new ClosePath(Data_Unit.unit));
};
var clip = function (dictMonad) {
    return liftGraphics(dictMonad)(new Clip(Data_Unit.unit));
};
var clearRect = function (dictMonad) {
    return function (r) {
        return liftGraphics(dictMonad)(new ClearRect(r, Data_Unit.unit));
    };
};
var beginPath = function (dictMonad) {
    return liftGraphics(dictMonad)(new BeginPath(Data_Unit.unit));
};
var arc = function (dictMonad) {
    return function (a) {
        return liftGraphics(dictMonad)(new Arc(a, Data_Unit.unit));
    };
};
module.exports = {
    arc: arc,
    beginPath: beginPath,
    clearRect: clearRect,
    clip: clip,
    closePath: closePath,
    createImageData: createImageData,
    createImageDataCopy: createImageDataCopy,
    drawImage: drawImage,
    drawImageScale: drawImageScale,
    drawImageFull: drawImageFull,
    fill: fill,
    fillRect: fillRect,
    fillText: fillText,
    font: font,
    getImageData: getImageData,
    lineTo: lineTo,
    measureText: measureText,
    moveTo: moveTo,
    putImageData: putImageData,
    putImageDataFull: putImageDataFull,
    rect: rect,
    restore: restore,
    rotate: rotate,
    save: save,
    scale: scale,
    setAlpha: setAlpha,
    setComposite: setComposite,
    setFillStyle: setFillStyle,
    setFont: setFont,
    setLineCap: setLineCap,
    setLineWidth: setLineWidth,
    setShadowBlur: setShadowBlur,
    setShadowColor: setShadowColor,
    setShadowOffsetX: setShadowOffsetX,
    setShadowOffsetY: setShadowOffsetY,
    setStrokeStyle: setStrokeStyle,
    setTextAlign: setTextAlign,
    stroke: stroke,
    strokeRect: strokeRect,
    strokeText: strokeText,
    textAlign: textAlign,
    transform: transform,
    translate: translate,
    runGraphics: runGraphics,
    runGraphicsT: runGraphicsT,
    interpretGraphics: interpretGraphics,
    functorGraphicsF: functorGraphicsF
};
